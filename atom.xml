<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Thibaud’s blog]]></title>
  <link href="https://thib.me/atom.xml" rel="self"/>
  <link href="https://thib.me/"/>
  <updated>2023-10-28T04:23:50+00:00</updated>
  <id>https://thib.me/</id>
  <author>
    <name><![CDATA[Thibaud Colas]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Maintaining the pre-commit-stylelint mirror]]></title>
    <link href="https://thib.me/maintaining-the-pre-commit-stylelint-mirror"/>
    <updated>2023-06-23T00:47:03+00:00</updated>
    <id>https://thib.me/maintaining-the-pre-commit-stylelint-mirror</id>
    <content type="html"><![CDATA[<p>About a year and a half <a href="https://github.com/pre-commit/pre-commit/issues/1768">after set up pre-commit-stylelint</a>, I thought I’d quickly look into how well this mirror has been running.</p>

<!-- more -->

<p>TL;DR; from my perspective as a maintainer and user of this mirror, it’s working great and is better by all my personal measures than an equivalent install from the main project.</p>

<h2 id="maintenance">Maintenance</h2>

<ul>
  <li>It’s taken me about 1h of maintenance since initial setup. The main thing I did is writing this report, and adjusting the frequency of the mirroring script a couple times due to concerns with its energy usage.</li>
  <li>No one has opened any issues in the mirror repository. As far as I can tell no one has reported problems with the mirror elsewhere either.</li>
</ul>

<h2 id="infrastructure">Infrastructure</h2>

<ul>
  <li>The script takes on average 20s to run, and did so 3 times per week for the last 12+ months. So over that year and a bit that’s somewhere around 1h of run time.</li>
  <li>Since initial setup, the mirror has published 38 versions of Stylelint.</li>
</ul>

<p>Here is a graph from GitHub which shows commits – i.e. when versions were published over the last few months:</p>

<p><img src="/images/blog/maintaining-the-pre-commit-stylelint-mirror/pre-commit-stylelint-mirror-publish.png" alt="pre-commit-stylelint mirror publish" /></p>

<h2 id="usage">Usage</h2>

<ul>
  <li>According to GitHub statistics, on average 42 people or CI builds use this mirror (clone the repository) per day</li>
  <li>On average there are 133 clones of the repository per day.</li>
  <li>According to the same stats, less than 1 person looks at the project in GitHub per day.</li>
</ul>

<p>Here are the full statistics I have access to as of today:</p>

<p><img src="/images/blog/maintaining-the-pre-commit-stylelint-mirror/pre-commit-stylelint-mirror-usage.png" alt="pre-commit-stylelint mirror statistics" /></p>

<h2 id="takeaway">Takeaway</h2>

<p>Last year I compared the <a href="https://github.com/pre-commit/pre-commit/issues/1768#issuecomment-1032701216">performance of installing ESLint via a mirror vs. the base repository</a>. For that package, the mirror was about 8x faster (7s vs. a minute). If we used those numbers to assess how much processing the mirror has saved – that’d be a lower bound of <code class="language-plaintext highlighter-rouge">7s per use * 42 users per day * 365 days</code> per year: 30 hours, vs.  255 hours if the same amount of usage had happened via installs of the repository directly.</p>

<p>Again this is mixing <em>ESLint</em> installation times with Stylelint usage figures, so not really correct by any means, but is a good indication the 1h the mirror runs per year is well worth the time and energy saved for everyone. If I calculate this again in the future I’ll also look at memory usage.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DjangoCon Europe 2023 – Accessibility review of djangoproject.com]]></title>
    <link href="https://thib.me/djangocon-europe-2023-accessibility-review-of-djangoproject-com"/>
    <updated>2023-06-02T21:13:03+00:00</updated>
    <id>https://thib.me/djangocon-europe-2023-accessibility-review-of-djangoproject-com</id>
    <content type="html"><![CDATA[<p>Here are the results of a quick accessibility audit I did for the <a href="https://www.djangoproject.com/">Django project website</a>, as part of the DjangoCon Europe 2023 sprints.</p>

<!-- more -->

<p>I recorded myself going through this and put it up on YouTube, so we have a demo for each of the issues: <a href="https://www.youtube.com/watch?v=dAiMPTOMh1U">djangoproject.com accessibility testing - DjangoCon Europe 2023</a>. I’ve also reported the issues in the project’s GitHub repository: <a href="https://github.com/django/djangoproject.com/issues/1381">Accessibility issues with site design and implementation #1381</a>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/dAiMPTOMh1U" title="YouTube video player: djangoproject.com accessibility testing | DjangoCon Europe 2023" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<h2 id="overview">Overview</h2>

<p>TL;DW; There are pretty fundamental issues, that aren’t always blockers but would require widespread changes to address: keyboard support, color contrast, use of headings. My recommended highest-priority changes are:</p>

<ol>
  <li>A new top-level navigation, including keyboard support fixes.</li>
  <li>Changes to the main content layout for easier navigation to important links.</li>
  <li>A new color palette with more legible text.</li>
</ol>

<h2 id="issues">Issues</h2>

<p>Here is a detailed list of issues I spotted, split into the categories I normally use, with links to my testing video’s timestamps, WCAG success criteria, and existing GitHub issues where appropriate.</p>

<h3 id="blockers">Blockers</h3>

<blockquote>
  <p>Blocker: Critical issue. Certain users cannot perceive or operate this, with no workaround available.</p>
</blockquote>

<ul>
  <li>The “hamburger” menu toggle is impossible to use with a keyboard. This makes it impossible for keyboard and screen reader users to access menu items and navigate the site in this way. (<a href="https://github.com/django/djangoproject.com/issues/1234">Menu button is not a button #1234</a>, <a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1098s">18:18</a>, <a href="https://www.w3.org/TR/WCAG22/#keyboard">SC 2.1.1 Keyboard</a>).</li>
  <li>The page’s second column content is hidden in print stylesheets. This makes it impossible for users of magnifiers to access this content (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1320s">22:00</a>).</li>
</ul>

<h3 id="major">Major</h3>

<blockquote>
  <p>Major: Certain users are very likely to have difficulty perceiving or operating this.</p>
</blockquote>

<ul>
  <li>Heading level 1 should be used for the title of the page / visually most prominent heading, ideally not for invisible content (“Django” on homepage). Ideally each page would only have a single h1. (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=424s">07:04</a>, <a href="https://www.w3.org/TR/WCAG22/#info-and-relationships">SC 1.3.1 Info and Relationships</a>).</li>
</ul>

<h3 id="confusing">Confusing</h3>

<blockquote>
  <p>Confusing: Understanding or operating this may be difficult for some users.</p>
</blockquote>

<ul>
  <li>Focus style almost invisible on “Get started with Django” CTA (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=150s">02:30</a>, <a href="https://www.w3.org/TR/WCAG22/#non-text-contrast">SC 1.4.11 Non-Text Contrast</a>).</li>
  <li>Links should be identifiable with other means than color (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=330s">05:30</a>, <a href="https://www.w3.org/TR/WCAG22/#use-of-color">SC 1.4.1 Use of Color</a>).</li>
  <li>All page content should be in a landmark (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=579s">09:39</a>, <a href="https://www.w3.org/TR/WCAG22/#info-and-relationships">SC 1.3.1 Info and Relationships</a>).</li>
  <li>A lot of text has color contrast issues making it hard to read (<a href="https://github.com/django/djangoproject.com/issues/974">#974</a>, <a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=788s">13:08</a>, <a href="https://www.w3.org/TR/WCAG22/#contrast-minimum">SC 1.4.3 Contrast (Minimum)</a>).</li>
  <li>Scrolling should remain vertical only (no overflows) when using 400% page zoom (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1008s">16:48</a>, <a href="https://www.w3.org/TR/WCAG22/#reflow">SC 1.4.10 Reflow</a>).</li>
  <li>Website logo disappears in forced colors mode with a light theme (white on white) (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1154s">19:14</a>, <a href="https://www.w3.org/TR/WCAG22/#contrast-minimum">SC 1.4.3 Contrast (Minimum)</a>).</li>
</ul>

<h3 id="minor">Minor</h3>

<blockquote>
  <p>Minor: Degraded user experience for some users. This slows down use of the application.</p>
</blockquote>

<ul>
  <li>Missing skip link (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=42s">00:42</a>, <a href="https://www.w3.org/TR/WCAG22/#bypass-blocks">SC 2.4.1 Bypass Blocks</a>).</li>
  <li>Custom “dotted outline” focus styles: not visible enough and broken in main navigation (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=62s">01:02</a>, <a href="https://www.w3.org/TR/WCAG22/#focus-appearance">SC 2.4.13 Focus Appearance</a>).</li>
  <li>The two-column layout as implemented means reaching the second column content with the keyboard requires going through the entire first column (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=178s">02:58</a>, see also <a href="https://github.com/django/djangoproject.com/issues/494">#494</a>).</li>
  <li>The sidebar heading hierarchy makes it hard to understand the content structure (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=424s">07:04</a>).</li>
  <li>Keep uppercase text to a minimum. Can be problematic to read for some people, shouty, leads to pronounciation issues with screen readers (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=940s">15:40</a>).</li>
  <li>Avoid interactive elements going right up to the edge of the screen on smaller viewports (“Get started with Django” button), as it makes it hard for touch users to touch-scroll past those elements (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1050s">17:30</a>).</li>
  <li>For forced colors mode compatibility, show the regions of the page with borders since backgrounds are removed (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1180s">19:40</a>).</li>
  <li>For forced colors mode compatibility, show the outline of buttons with borders since backgrounds are removed (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1180s">19:40</a>).</li>
  <li>Form fields should remain visible in print stylesheets so the page content is understandable (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1340s">22:20</a>).</li>
</ul>

<h3 id="best-practices">Best practices</h3>

<blockquote>
  <p>Best practices: These are not accessibility issues, but are recommended for ensuring the best user experience.</p>
</blockquote>

<ul>
  <li>The theme toggle’s icon should resize according to browser font size changes (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=920s">15:20</a>).</li>
  <li>Footer logos should also ideally resize according to browser font size changes (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=920s">15:20</a>).</li>
  <li>Hide the theme toggle in print styles (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1265s">21:05</a>).</li>
  <li>Have link URLs visible in print styles (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1265s">21:05</a>).</li>
  <li>Hide footer content in print styles (<a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1265s">21:05</a>).</li>
</ul>

<h2 id="methodology">Methodology</h2>

<p>In the interest of time, I only reviewed the site with a suite of automated and semi-automated checks available in Google Chrome:</p>

<ul>
  <li>Axe automated checks bundled in the <a href="https://accessibilityinsights.io/">Accessibility Insights extension</a>.</li>
  <li>Other tools from Accessibility Insights: Landmarks, Color, Tab stops, Headings, Accessible names</li>
  <li>Simulated <a href="https://blogs.windows.com/msedgedev/2020/09/17/styling-for-windows-high-contrast-with-new-standards-for-forced-colors/">forced colors mode</a></li>
  <li>Font resizing and page zoom</li>
  <li>Keyboard navigation</li>
</ul>

<p>Though those tests will find a lot of common issues, normally accessibility testing would include navigating the site with assistive technologies (screen readers, speech recognition, screen magnification, etc).</p>

<h2 id="video-timestamps">Video timestamps</h2>

<ul>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=0s">00:00 - Intro</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=15s">00:15 - Methodology</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=30s">00:30 - Keyboard support</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=42s">00:42 - Missing skip link</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=62s">01:02 - Focus styles in nav</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=150s">02:30 - Focus styles in main CTA</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=178s">02:58 - Two-column layout</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=230s">03:50 - Tab stops</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=290s">04:50 - More focus styles issues</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=330s">05:30 - Link indicators</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=424s">07:04 - Headings</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=579s">09:39 - Landmarks</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=613s">10:13 - Complementary landmark</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=665s">11:05 - Accessible names</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=690s">11:30 - Heading “Django”</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=723s">12:03 - Good example: theme toggle</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=732s">12:12 - Decorative icons</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=745s">12:25 - Alt text in theory</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=788s">13:08 - Color contrast</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=830s">13:50 - Design issues leading to low contrast</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=878s">14:38 - CSS overview</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=920s">15:20 - Font resizing</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=940s">15:40 - Uppercase text</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=990s">16:30 - Resizing images of text and icons</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1008s">16:48 - Page-level 400% zoom</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1030s">17:10 - Overflow issues</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1050s">17:30 - Edge-to-edge button</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1090s">18:10 - Enough margin to scroll past</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1098s">18:18 - Mobile menu keyboard support</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1154s">19:14 - Forced colors mode</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1168s">19:28 - Disappearing logo</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1180s">19:40 - Page structure and button borders</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1220s">20:20 - Link text in WHCM</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1265s">21:05 - Print stylesheets</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1320s">22:00 - Missing sidebar in print styles</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1340s">22:20 - Missing form fields</a></li>
  <li><a href="https://www.youtube.com/watch?v=dAiMPTOMh1U&amp;t=1375s">22:55 - Recap</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Next.js ❤️ Wagtail]]></title>
    <link href="https://thib.me/nextjs-loves-wagtail"/>
    <updated>2023-05-31T04:13:03+00:00</updated>
    <id>https://thib.me/nextjs-loves-wagtail</id>
    <content type="html"><![CDATA[<p>Our DjangoCon 2023 workshop on headless Wagtail with Next.js.</p>

<!-- more -->

<p>👋 welcome to a self-paced headless CMS workshop! This workshop covers:</p>

<ul>
  <li>Initial project setup: what Wagtail and Next.js are, and how to set them up</li>
  <li>Connecting Next.js with the backend</li>
  <li>Deployment!</li>
</ul>

<p>The workshop was created for DjangoCon Europe 2023 by <a href="https://github.com/laymonage">@laymonage</a> and <a href="https://github.com/thibaudcolas">@thibaudcolas</a> – but we expect it can all be done on your own anytime.</p>

<p><a href="https://github.com/thibaudcolas/nextjs-loves-wagtail">View the workshop materials on GitHub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Software Foundation pins]]></title>
    <link href="https://thib.me/django-software-foundation-pins"/>
    <updated>2023-05-29T16:13:03+00:00</updated>
    <id>https://thib.me/django-software-foundation-pins</id>
    <content type="html"><![CDATA[<p>During DjangoCon Europe 2023 on the first day, we made a bunch of DSF designs for use as pins or stickers.</p>

<!-- more -->

<h2 id="the-pins">The pins</h2>

<p><a href="https://github.com/thibaudcolas/dsf-pins">https://github.com/thibaudcolas/dsf-pins</a></p>

<p>See source designs <a href="https://www.figma.com/file/v1WfquYwTNSkfKZp5Ny51Z/DjangoCon-Europe-2023-Edinburgh-website-design?type=design&amp;node-id=605-180">in Figma</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why 96.3% of the Web Fails at Accessibility - GAAD 2023]]></title>
    <link href="https://thib.me/why-96-3-percent-of-the-web-fails-at-accessibility-gaad-2023"/>
    <updated>2023-05-18T15:13:03+00:00</updated>
    <id>https://thib.me/why-96-3-percent-of-the-web-fails-at-accessibility-gaad-2023</id>
    <content type="html"><![CDATA[<p>As part of Global Accessibility Awareness Day 2023, here is an overview of the state of accessibility on the Web, and specifically how technology like Wagtail has an impact.</p>

<!-- more -->

<p>Slides (Google Slides): <a href="https://docs.google.com/presentation/d/15KUwbaVI_bKO1xJwRvWw5gSGXaufVryAE4xXxde6-tA/edit">Why 96.3% of the Web Fails at Accessibility - GAAD 2023</a></p>

<p>Recording:</p>

<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/Htybs50VpfU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<h2 id="highlights">Highlights</h2>

<p>Here are high-level highlights / graphs from the presentation.</p>

<h3 id="963">96.3%</h3>

<p>96.3% of the top 1’000’000 sites have basic* accessibility issues. Source: <a href="https://webaim.org/projects/million/">WebAIM Million</a>.</p>

<p>*basic = WCAG AA failure</p>

<h3 id="why-we-care-about-accessibility">Why we care about accessibility</h3>

<ul>
  <li>We want all users to have a great experience, no matter how they use the web.</li>
  <li>Accessibility improvements lead to usability improvements for all.</li>
</ul>

<blockquote>
  <p>Search: “Curb Cut Effect”</p>
</blockquote>

<h4 id="legally-everywhere-wcag-21-aa-level">Legally (everywhere): <a href="https://www.w3.org/TR/WCAG21/">WCAG 2.1</a>, AA level</h4>

<ul>
  <li><strong>UK</strong>: PSBAR 2018, Equality Act</li>
  <li><strong>EU</strong>: Web Accessibility Act, European Accessibility Act</li>
  <li><strong>US</strong>: ADA, Section 508</li>
</ul>

<p>Soon – WCAG 2.2</p>

<h3 id="the-extent-of-the-problem">The extent of the problem</h3>

<p><img src="/images/blog/why-96-3-percent-of-the-web-fails-at-accessibility-gaad-2023/percentage-homepage-failures.png" alt="Percentage of home pages with detected WCAG conformance failures over time" /></p>

<blockquote>
  <p>Percentage of home pages with detected WCAG conformance failures over time</p>
</blockquote>

<p>Source: <a href="https://webaim.org/projects/million/">WebAIM Million</a></p>

<p>Projecting this:</p>

<p><img src="/images/blog/why-96-3-percent-of-the-web-fails-at-accessibility-gaad-2023/analyse-tres-poussee.gif" alt="Screencap of Excel sheet projection of how errors over time will reduce" /></p>

<h4 id="deque--axe-the-automated-accessibility-coverage-report">Deque / Axe: The Automated Accessibility Coverage Report</h4>

<p><img src="/images/blog/why-96-3-percent-of-the-web-fails-at-accessibility-gaad-2023/deque-axe-coverage-automation.png" alt="57.38% of total issues were detected using automated tests" /></p>

<p>Source: Deque, 2021 – <a href="https://deque.com/coverage-report/">deque.com / coverage-report (PDF)</a></p>

<h3 id="the-impact-of-technology">The impact of technology</h3>

<p><img src="/images/blog/why-96-3-percent-of-the-web-fails-at-accessibility-gaad-2023/webaim-million-errors-by-cms.png" alt="57.38% of total issues were detected using automated tests" /></p>

<p>Source: <a href="https://webaim.org/projects/million/#technologies">WebAIM Million technologies</a></p>

<h3 id="how-can-we-do-better">How can we do better?</h3>

<p>Design. Technology. And Wagtail</p>

<ol>
  <li>Provide <a href="https://hiddedevries.nl/en/blog/2020-03-01-more-accessible-defaults-please"><strong>accessible defaults</strong></a>.</li>
  <li>Follow accessibility best practices.</li>
</ol>

<h4 id="methodology-shift-left">Methodology: Shift-Left</h4>

<p><img src="/images/blog/why-96-3-percent-of-the-web-fails-at-accessibility-gaad-2023/deque-shift-left.png" alt="57.38% of total issues were detected using automated tests" /></p>

<p>Ref: <a href="https://www.deque.com/shift-left/">deque.com / shift-left</a></p>

<p>Shift-Left in practice</p>

<ul>
  <li>Clear strategy defined from the get-go</li>
  <li>Accessibility considerations at every stage</li>
  <li>Automated and manual QA</li>
  <li><strong>Audits as a last resort!</strong></li>
</ul>

<h4 id="good-resources">Good resources</h4>

<ul>
  <li>Guides for all roles: <a href="https://accessibility.digital.gov/">Accessibility for Teams</a> (GSA)</li>
  <li>Acceptance criteria<strong>:</strong> <a href="https://www.deque.com/blog/collaborative-planning-the-forgotten-step-of-accessible-development/">a11y BID</a>, <a href="https://www.magentaa11y.com/">MagentaA11y</a></li>
</ul>

<h3 id="accessible-defaults">Accessible defaults</h3>

<p>Accessible defaults means…</p>

<ul>
  <li>Doing the right thing should be the path of least resistance.</li>
  <li>The default behavior should lead to accessible experiences <em>without extra work</em>.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;button&gt;Submit&lt;/button&gt;</code> over <code class="language-plaintext highlighter-rouge">&lt;div role="button"&gt;Submit&lt;/div&gt;</code></li>
</ul>

<h4 id="existing-standard-atag-20">Existing standard: <a href="https://www.w3.org/TR/ATAG20/">ATAG 2.0</a></h4>

<p>ATAG: Authoring Tool Accessibility Guidelines</p>

<ul>
  <li><a href="https://www.w3.org/TR/ATAG20/#part_a">A. Make the authoring tool user interface accessible</a></li>
  <li><a href="https://www.w3.org/TR/ATAG20/#part_b">B. Support the production of accessible content</a></li>
</ul>

<h4 id="authoring-tools">Authoring tools?</h4>

<ul>
  <li>web page authoring tools (e.g. <a href="https://www.w3.org/TR/ATAG20/#def-WYSIWYG">WYSIWYG</a> HTML editors)</li>
  <li>software for directly editing source code</li>
  <li>software for converting to <a href="https://www.w3.org/TR/ATAG20/#def-Web-Content-Technology">web content technologies</a> (e.g. “Save as HTML” features in office document applications)</li>
  <li>integrated development environments (e.g. for web application development)</li>
  <li>software that generates web content on the basis of <a href="https://www.w3.org/TR/ATAG20/#def-Template">templates</a>, scripts, command-line input or “wizard”-type processes</li>
  <li>software for rapidly updating portions of web pages (e.g. blogging, wikis, online forums)</li>
  <li>software for generating/managing entire websites (e.g. <strong>content management systems</strong>, courseware tools, content aggregators)</li>
  <li>email clients that send messages using web content technologies</li>
  <li>multimedia authoring tools</li>
  <li>software for creating mobile web applications</li>
</ul>

<p>Examples:</p>

<ul>
  <li>Rails, Django, CKEditor, TinyMCE, Wagtail, Drupal</li>
  <li>Zoom, <strong>Slack</strong>, Gmail, Excel, Notion</li>
  <li>Instagram, YouTube, TikTok, LinkedIn Live</li>
  <li>VS Code, GitHub. Tailwind, HTMX, React.</li>
</ul>

<h4 id="demand-more-from-your-tools">Demand more from your tools</h4>

<p>Back to ATAG:</p>

<ul>
  <li>B.1. Fully automatic processes produce accessible content</li>
  <li>B.2. Authors are supported in producing accessible content</li>
  <li>B.3. Authors are supported in improving the accessibility of existing content</li>
  <li>B.4. Authoring tools promote and integrate their accessibility features</li>
</ul>

<h5 id="qa-quick-wins-demo">QA quick wins: demo</h5>

<ul>
  <li><a href="https://blogs.windows.com/msedgedev/2020/09/17/styling-for-windows-high-contrast-with-new-standards-for-forced-colors/">forced-colors / Windows High Contrast mode / Contrast themes</a></li>
  <li>Reader mode / reading mode / immersive reader</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wagtail accessibility statistics for GAAD 2023]]></title>
    <link href="https://thib.me/wagtail-accessibility-statistics-for-gaad-2023"/>
    <updated>2023-05-17T23:13:03+00:00</updated>
    <id>https://thib.me/wagtail-accessibility-statistics-for-gaad-2023</id>
    <content type="html"><![CDATA[<p>As part of #GAAD, this week we’re sharing accessibility stats &amp; tips from Wagtail sites.</p>

<!-- more -->

<h2 id="accessibility-checks-on-wagtail-sites">Accessibility checks on Wagtail sites</h2>

<p>Here are 4 common issues detectable with our built-in checker:</p>

<p><img src="/images/blog/wagtail-accessibility-statistics-for-gaad-2023/accessibility_checks_on_wagtail_sites.png" alt="Accessibility checks on Wagtail sites - HTTP Archive Wagtail sites in 2023 - GAAD 2023" /></p>

<ul>
  <li><strong>button-name</strong>: A button element on the page is lacking a label. This is entirely detectable with automated tests such as those featured in our <a href="https://wagtail.org/blog/introducing-wagtails-new-accessibility-checker/">built-in accessibility checker</a>, built on Axe.</li>
  <li><strong>frame-title</strong>: A frame (such as an embedded video) is missing its title. Again entirely detectable with automated tests – and very simple to fix once identified!</li>
  <li><strong>heading-order</strong>: Some heading levels are getting skipped on the page – always have a main heading (h1) followed by subheadings (h2, h3, etc.).</li>
  <li><strong>link-name</strong>: Just like button-name, one of the page’s links is missing its title.</li>
</ul>

<p>All of those issues are <a href="https://almanac.httparchive.org/en/2022/accessibility#heading-hierarchy">common on the web</a>, but with the right tests in place, there is no reason for that to remain the case.</p>

<hr />

<p><em>Here is the data for this graph: <a href="https://docs.google.com/spreadsheets/d/1dLpW6fbcl-AsVQNVhihzi1p-fY5gByZK_EQWt-EtCoM/edit#gid=316824519">Lighthouse checks, 2023-04</a></em>.</p>

<h2 id="mean-accessibility-scores-of-wagtail-sites">Mean accessibility scores of Wagtail sites</h2>

<p>We see clear improvements over time on accessibility scores of Wagtail sites, but they’re too slow-moving:</p>

<p><img src="/images/blog/wagtail-accessibility-statistics-for-gaad-2023/mean_accessibility_scores_of_wagtail_sites.png" alt="Mean accessibility scores of Wagtail sites - HTTP Archive sites in 2023 - GAAD 2023" /></p>

<p>This shows the mean accessibility score of Wagtail sites over time, compared to <a href="https://almanac.httparchive.org/en/2022/accessibility#introduction">industry-average figures</a>. Wagtail sites are consistently doing better – but only just.</p>

<p>With appropriate targets and ongoing testing, there is no reason all sites couldn’t score a perfect “100” (no issues detected) on those tests.</p>

<hr />

<p><em>Data for this chart is from the <a href="https://discuss.httparchive.org/t/new-dashboard-the-core-web-vitals-technology-report/2178">Core Web Vitals Technology Report</a></em>.</p>

<h2 id="high-contrast-mode-support-in-wagtail-sites">High contrast mode support in Wagtail sites</h2>

<p>#GAAD tip #3: Support High contrast mode on your websites! Also known as Contrast themes, it allows users to adjust the color palette of the site to better suit their vision. Very few websites make adjustments to support it:</p>

<p><img src="/images/blog/wagtail-accessibility-statistics-for-gaad-2023/high_contrast_mode_support_in_Wagtail_sites.png" alt="High contrast mode support in Wagtail sites - HTTP Archive Wagtail sites in 2022-07 - GAAD 2023" /></p>

<ul>
  <li>“forced-colors” indicates a website making adjustments for users with custom color palettes – for example adding extra borders</li>
  <li>“prefers-contrast” indicates a website adjusting its styles based on whether users request more or <em>less</em> contrast, which is an option in iOS and Android</li>
</ul>

<p>We’ve made a lot of adjustments in recent versions of Wagtail to better support Contrast Themes / High contrast mode. Here’s an example in the default dark theme:</p>

<p><img src="/images/blog/wagtail-accessibility-statistics-for-gaad-2023/whcm-wagtail-5.png" alt="Wagtail's page editing UI in high contrast mode, with completely custom colors" /></p>

<hr />

<p><em>The data for this graph is from July 2022 – to access it, have a look at <a href="https://docs.google.com/spreadsheets/d/1dLpW6fbcl-AsVQNVhihzi1p-fY5gByZK_EQWt-EtCoM/edit#gid=1613420195">Wagtail CSS media queries 2022-07</a></em>.</p>

<h2 id="wagtail-sites-with-no-detected-issues">Wagtail sites with no detected issues</h2>

<p>Aim higher with all things accessibility. Wagtail sites are doing better year over year, but there’s still lots to do:</p>

<p><img src="/images/blog/wagtail-accessibility-statistics-for-gaad-2023/wagtail_sites_with_no_detected_issues.png" alt="Wagtail sites with no detected issues - HTTP Archive Wagtail sites in 2023 vs 2022 - GAAD 2023" /></p>

<p>We found 4.44% of Wagtail sites had no issues detected in 2023, compared to 3.83% in 2022. Those numbers are <a href="https://webaim.org/projects/million/">above industry averages</a> but nowhere near our ambitions. All sites can score a perfect “0 errors” detected - and then further spend time on manual tests which can also uncover fundamental issues.</p>

<p>We hope our commitment to the <a href="https://www.w3.org/TR/ATAG20/">ATAG 2.0 standard</a> will help all Wagtail sites get there, with tools like our accessibility checker paving the way.</p>

<hr />

<p><em>Here is the data for this graph: <a href="https://docs.google.com/spreadsheets/d/1dLpW6fbcl-AsVQNVhihzi1p-fY5gByZK_EQWt-EtCoM/edit#gid=684166254">Lighthouse scores, 2023-04</a></em>.</p>

<h2 id="data-and-methodology">Data and methodology</h2>

<p>The data we use comes from a dataset of the world’s top 8M website homepages: <a href="https://httparchive.org/">HTTP Archive</a>. 4,000+ websites in this dataset are identified as using Wagtail, thanks to <a href="https://www.wappalyzer.com/">Wappalyzer</a>.</p>

<p>From this dataset, we then extract specific statistics following the methodology of the <a href="https://almanac.httparchive.org/en/2022/accessibility">2022 HTTP Archive Web Almanac’s accessibility chapter</a> – but filtering to only assess Wagtail projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estimating Wagtail websites’ emissions]]></title>
    <link href="https://thib.me/estimating-wagtail-websites-emissions"/>
    <updated>2023-05-10T18:39:03+00:00</updated>
    <id>https://thib.me/estimating-wagtail-websites-emissions</id>
    <content type="html"><![CDATA[<p>Wagtail’s approach to quantifying the carbon footprint of Wagtail websites, so we can reduce it.</p>

<!-- more -->

<p>As Wagtail took off as a project, it became crystal clear it would be popular. Not necessarily as popular as the most established CMS options (yet!), but still powering serious websites on the web. This popularity comes with a responsibility: for us to acknowledge Wagtail websites do have a clear carbon footprint in their operations. Those digital emissions contribute to the climate change impact of the digital world. This acknowledgement is the foundation of <a href="https://wagtail.org/sustainability/">our commitment to sustainability</a>.</p>

<p>Based on <a href="https://www.cell.com/patterns/pdfExtended/S2666-3899(21)00188-4">current research</a>, emissions from Information and Communication Technologies represent on the order of 2 to 4% of global emissions (similar to major countries or transportation industries). And they’re projected significantly in the future. Let’s do our best to estimate Wagtail’s footprint within those numbers – so we can reduce it.</p>

<h2 id="our-preferred-methodology">Our preferred methodology</h2>

<p>Due to how carbon emissions originate at all points in the value chain of software, it can be very hard to estimate them accurately. We chose a methodology which makes up for its lack of precision by being very established and simple to apply: the <a href="https://sustainablewebdesign.org/calculating-digital-emissions/">Sustainable Web Design model</a>. This is the model used by a lot of online calculators, such as <a href="https://www.websitecarbon.com/">Website Carbon</a>.</p>

<p>This methodology clearly specifies two fundamentals decisions when estimating emissions:</p>

<ul>
  <li><strong>What to measure</strong> – often referred to as “system boundaries” or segments. This can be <a href="https://www.wholegraindigital.com/blog/website-energy-consumption/">very complex on the web</a>, where the fundamental website visitor experience involves a lot of infrastructure and devices, with different ownership structures.</li>
  <li><strong>How to measure it</strong> – practically, how to compute emissions once the system boundaries are agreed.</li>
</ul>

<h3 id="system-boundaries">System boundaries</h3>

<p>Here are the system boundaries as defined by this methodology:</p>

<p><img src="/images/blog/estimating-wagtail-websites-emissions/swd-energy-usage.png" alt="How the Sustainable Web Design model allocates energy usage" /></p>

<p><em>Image credit:</em> <a href="https://developers.thegreenwebfoundation.org/co2js/explainer/methodologies-for-calculating-website-carbon/"><em>Green Web Foundation, CO2.js</em></a></p>

<ul>
  <li><strong>Consumer device use</strong>: end users interacting with a product or service. This accounts for an estimated 52% of the system.</li>
  <li><strong>Network use</strong>: data transferred across the network. This accounts for an estimated 14% of the system.</li>
  <li><strong>Data center use</strong>: energy required to house and serve data. This accounts for an estimated 15% of the system.</li>
  <li><strong>Hardware production</strong>: embodied energy used in the creation of embedded chips, use of data centers, use of networks, and the use of consumer communication devices. This accounts for an estimated 19% of the system. </li>
</ul>

<h3 id="estimation-approach">Estimation approach</h3>

<p>With system boundaries now defined, the model then defines how to measure energy usage (and therefore emissions) with one key metric: data transferred, in kWh/GB. The more data is stored, manipulated, transferred over the network, displayed on a page – the more emissions.</p>

<p>There are <a href="https://www.fershad.com/writing/is-data-the-best-proxy-for-website-carbon-emissions/">clear flaws with this approach</a>: different types of data will be more or less taxing on different parts of the system. It’s nonetheless a good starting approximation because of how simple it is to measure the size of website pages.</p>

<h3 id="more-precise-measurements">More precise measurements</h3>

<p>With the help of the Green Coding Berlin group and the Green Web Foundation, we’ve also been exploring much more precise measurements as part of the <a href="https://github.com/wagtail/wagtail/discussions/8843">Green coding</a> project. With their technology, we can measure detailed power consumption of specific components as a simulated user interacts with the site:</p>

<p><img src="/images/blog/estimating-wagtail-websites-emissions/green-coding-chart.png" alt="Green coding chart" /></p>

<p>Here, we see how different parts of a website’s infrastructure consume more or less energy as part of specific aspects of serving pages.</p>

<hr />

<p>Those measurements have the potential to allow us to quantify specific improvements to the CMS, therefore improving our ability to influence Wagtail websites’ footprint in the real world.</p>

<h2 id="measuring-the-wagtail-web">Measuring the Wagtail web</h2>

<p>To apply our chosen methodology to Wagtail websites, out there, we can use publicly-available data: the Chrome UX Report (CrUX), HTTP Archive, and Wappalyzer. This is the same methodology as devised for the HTTP Archive’s yearly Web Almanac report, which had a <a href="https://almanac.httparchive.org/en/2022/sustainability">Sustainability chapter</a> for the first time in 2022.</p>

<p>With those datasets of websites’ homepages, as of April 2023, we get:</p>

<ul>
  <li><strong>4349 websites reported as using Wagtail</strong></li>
  <li>For those websites, a <strong>median page weight of 1.9 MB</strong>. This is higher than we’d like but <a href="https://almanac.httparchive.org/en/2022/page-weight#request-bytes">in line with industry averages</a>.</li>
  <li>Emissions per page visit on the order of 0.5 to 1.5 grams of CO2 equivalent per page view (gCO2e/pageview)</li>
  <li><strong>Average emissions per site around 1.9 tCO2e/year</strong></li>
</ul>

<p>All in all – <strong>a total of 8240 tons of CO2e/year for all 4349 Wagtail sites</strong>. Though also in line with <a href="https://almanac.httparchive.org/en/2022/sustainability#carbon-emissions">industry average carbon emissions data</a>, this is an uncomfortable figure nonetheless. Which we now have to work to reduce.</p>

<p>Here is what those emissions look like as a tree map, with specific sites or countries sized according to their emissions:</p>

<p><img src="/images/blog/estimating-wagtail-websites-emissions/total_carbon_footprint_of_Wagtail_sites_as_a_treemap.png" alt="Total carbon footprint of Wagtail sites as a treemap - 8240 tCO2e per year" /></p>

<hr />

<p><em>For further reference, access our full report and data:</em> <a href="https://docs.google.com/spreadsheets/d/18TuJvN-SHDZAFXFFQgVwt5S5kQO-eYiGCHJGQmwed4Q/edit"><em>Wagtail sites emissions dashboard</em></a></p>

<h2 id="whats-next">What’s next</h2>

<p>Based on this research, we’re hoping to inform future work. We’re soon starting <a href="https://wagtail.org/blog/going-green-with-google-summer-of-code/">Google Summer of Code internships with a green focus</a>, and also hoping to place sustainability improvements <a href="https://wagtail.org/roadmap/">on our roadmap</a> with the view to secure sponsorships from organisations who want to reduce their carbon emissions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Season of Docs: Creating Wagtail Developer Onboarding Tutorials]]></title>
    <link href="https://thib.me/google-season-of-docs-creating-wagtail-developer-onboarding-tutorials"/>
    <updated>2023-04-14T17:59:00+00:00</updated>
    <id>https://thib.me/google-season-of-docs-creating-wagtail-developer-onboarding-tutorials</id>
    <content type="html"><![CDATA[<p>We are excited to announce our participation in the 2023 Google Season of Docs program!</p>

<!-- more -->

<p><img src="/images/blog/google-season-of-docs-creating-wagtail-developer-onboarding-tutorials/seasonofdocs-visual.png" alt="" /></p>

<p>This year, after a successful experience working with technical writers <a href="https://wagtail.org/blog/our-very-first-outreachy-interns/">as part of Outreachy</a>, we’ve decided to take part in <a href="https://developers.google.com/season-of-docs">Google Season of Docs</a>. We’re aiming to create more comprehensive onboarding tutorials for developers, and get better at how we engage with technical writers in our community.</p>

<h2 id="what-is-google-season-of-docs">What is Google Season of Docs</h2>

<p>Google Season of Docs (or GSoD) is an annual program organized by Google to support open source projects improving their documentation, and to give professional technical writers an opportunity to gain experience in open source. The program pairs writers with organizations to collaborate on specific documentation projects. It fosters a culture of knowledge sharing and appreciation for the essential role of documentation in software development.</p>

<p>This year, Google selected <a href="https://developers.google.com/season-of-docs/docs/participants">13 organisations</a> to support.</p>

<h2 id="why-were-taking-part">Why we’re taking part</h2>

<p>There are several reasons we decided to participate in GSoD this year:</p>

<ol>
  <li>Improve our “getting started” documentation: We recognize that comprehensive, well-written documentation is crucial for the adoption and growth of any software project. Improving the “first thirty minutes of Wagtail” has been <a href="https://wagtail.org/blog/wagtail-vision/">part of our vision</a> for Wagtail in 2023 – focusing on the next few steps in developers’ onboarding feels natural.</li>
  <li>Learn from experienced technical writers: Collaboration with skilled technical writers brings fresh perspectives and insights that help us enhance our documentation processes and overall project communication. We got to see this happening for <a href="https://guide.wagtail.org/">guide.wagtail.org</a> during Outreachy, and are hoping to do the same for developer docs.</li>
  <li>Build relationships with the community: We hope GSoD will be a good opportunity to see how our <a href="https://wagtail.org/blog/wagtails-new-developer-relations-team/">new Developer Relations team</a> operates. Building developer tutorials will be a good opportunity to reach out to our community for feedback.</li>
</ol>

<h2 id="our-project">Our project</h2>

<p>Here is what we expect the project to consist of at this point:</p>

<ul>
  <li>Audit the existing Wagtail Get Started tutorial and create a friction log to ensure it is accessible and usable for newcomers.</li>
  <li>Use the friction log to update our primary tutorial and ensure it provides a strong basis for additional learning in the onboarding tutorial series.</li>
  <li>Review the Wagtail Bakery, an existing demo project used for teaching and testing, to determine which Wagtail features should be covered in the tutorials.</li>
  <li>Use the audit results to create a series of written tutorials for our documentation that teach newcomers how to build their own deployable Wagtail website using the newest version of Wagtail.</li>
  <li>Work with our community organisers to adapt the tutorials for open source beginners, which will support programs and workshops like Outreachy, GSoC, and Coders of Colour.</li>
  <li>Incorporate feedback from tutorial testers and the wider community.</li>
  <li>Work with the Wagtail core team to update our documentation and determine a process for maintaining the written tutorials going forward.</li>
  <li>Collaborate with our Developer Relations team to identify the best opportunities to share the tutorial with our community at upcoming events.</li>
</ul>

<h2 id="next-steps">Next steps</h2>

<p>We’re <a href="https://github.com/wagtail/wagtail/wiki/Google-Season-of-Docs-2023#getting-involved">accepting applications</a> from technical writers until April 15th (reach out in the <a href="https://github.com/wagtail/wagtail/wiki/Slack">Wagtail Slack workspace</a> in the <a href="https://app.slack.com/client/T0K33F93J/C051ERV9F9Q">#gsod channel</a> if you would welcome more time). We then hope to select a writer to work with by May 1st, and plan the next 6 months of work with them.</p>

<p>For more information, read through our <a href="https://github.com/wagtail/wagtail/wiki/Google-Season-of-Docs-2023">Google Season of Docs wiki page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaluating the carbon footprint of Django and Wagtail - Django London]]></title>
    <link href="https://thib.me/evaluating-carbon-footprint-django-wagtail"/>
    <updated>2023-04-12T18:39:03+00:00</updated>
    <id>https://thib.me/evaluating-carbon-footprint-django-wagtail</id>
    <content type="html"><![CDATA[<p>Slides and data from my presentation at Django London April 2023.</p>

<!-- more -->

<ul>
  <li><a href="https://docs.google.com/presentation/d/1nt70OGv7yq-W0FOnaPeQAW42i6D1lMl3Fi_hEAADWgc/edit">Slides: Evaluating the carbon footprint of Django and Wagtail sites - Django London</a></li>
  <li><a href="https://docs.google.com/spreadsheets/d/1Pv1jqWh7crhhmponSseFh5iqpgL2H8REvtu_UMl31uY/edit">Data: Evaluating the carbon footprint of Django and Wagtail sites - Django London</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wagtail’s new Developer Relations team]]></title>
    <link href="https://thib.me/wagtails-new-developer-relations-team"/>
    <updated>2023-03-26T12:24:00+00:00</updated>
    <id>https://thib.me/wagtails-new-developer-relations-team</id>
    <content type="html"><![CDATA[<p>We’re setting up a new contributors team for people interested in developer relations.</p>

<!-- more -->

<p>We’re now kickstarting a new developer relations team for Wagtail, to oversee how we engage with our community of developers. Sounds interesting? Consider joining!</p>

<h2 id="developer-relations">Developer relations</h2>

<p>As a general term, Developer Relations (or DevRel) is an umbrella term covering the relationships between Wagtail and developers within the project’s community. This encompasses marketing, training, community management, and other community-focused activities.</p>

<p>In the case of Wagtail – this could mean helping with our <a href="https://docs.wagtail.org/en/stable/">docs.wagtail.org</a> documentation site, or helping organise events such as <a href="https://www.wagtail.space/">Wagtail Space</a>. Or simply contributing developer experience focused improvements to the CMS.</p>

<h2 id="team-project-ideas">Team project ideas</h2>

<p>We’ve discussed a few project ideas that feel relevant already, though the team will decide for themselves once up and running:</p>

<ul>
  <li>Maintaining ready-to-use Wagtail tutorials or workshops – our current “Getting started” tutorial works well but is very short.</li>
  <li>Supporting Wagtail Space events – working with local organisers to make those events simpler to set up and run.</li>
  <li>Helping produce feature videos – to share the latest improvements made to the CMS.</li>
  <li>“Pitch Wagtail to your boss” slide deck – to describe Wagtail to stakeholders.</li>
  <li>Developer experience survey – helping us understand what capabilities would be most desirable to our main audience.</li>
</ul>

<h2 id="how-you-can-help">How you can help</h2>

<p>If you want to help shape Wagtail’s future, consider joining for the initial 6-month membership! All backgrounds and levels of expertise welcome. In particular, we hope this team will work well for people who don’t code and still want to contribute to open source.</p>

<p>To join, come say hi in #developer-relations on the <a href="https://github.com/wagtail/wagtail/wiki/slack">Wagtail Slack</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wagtail CMS projects for Google Summer of Code 2023]]></title>
    <link href="https://thib.me/wagtail-cms-projects-for-google-summer-of-code-2023"/>
    <updated>2023-02-22T18:50:00+00:00</updated>
    <id>https://thib.me/wagtail-cms-projects-for-google-summer-of-code-2023</id>
    <content type="html"><![CDATA[<p>For the third time, Wagtail is joining Google’s open source internships program.</p>

<!-- more -->

<p><img src="/images/blog/wagtail-cms-projects-for-google-summer-of-code-2023/wagtail-gsoc-social-preview.png" alt="" /></p>

<p>It’s official! Following our <a href="https://wagtail.org/blog/outreachy-welcoming-new-contributors-to-open-source/">participation to Outreachy</a> in the December 2022 cohort, Wagtail is taking part in <a href="https://summerofcode.withgoogle.com/">Google Summer of Code</a>.</p>

<h2 id="what-is-google-summer-of-code">What is Google Summer of Code</h2>

<p>Also known as GSoC, Google Summer of Code is a global, online program focused on bringing new contributors into open source software development. GSoC Contributors work with an open source organization on a 12+ week programming project under the guidance of mentors.</p>

<h2 id="project-ideas">Project ideas</h2>

<p>We’ve earmarked three project ideas this year.</p>

<h3 id="dark-theme-for-wagtail-admin">Dark theme for Wagtail admin</h3>

<p><em>🚧 Update: we have discontinued this idea, as the work involved isn’t substantial enough to represent a GSoC project.</em></p>

<p>This is a continuation of past projects to make Wagtail’s color theme configurable, and accessibility improvements for Windows High Contrast mode users.</p>

<p>Here is the latest prototype of our dark theme, in a high contrast variant:</p>

<p><img src="/images/blog/wagtail-cms-projects-for-google-summer-of-code-2023/dark-high-contrast.png" alt="Wagtail dark theme prototype, in high contrast mode" /></p>

<p>For more information, see <a href="https://github.com/wagtail/wagtail/issues/10056">Dark theme for the admin interface #10056</a>.</p>

<h3 id="rfc-72-background-workers">RFC 72: Background workers</h3>

<p>Wagtail currently doesn’t have a first-party solution for long-running tasks. Other CMSs in the ecosystem such as WordPress and Drupal have background workers, allowing them to push tasks into the background to be processed at a later date, without requiring the end user to wait for them to occur.</p>

<p>One of the key goals for this project is removing the requirement for the user to wait for tasks they don’t need to.</p>

<p>For more information, see <a href="https://github.com/wagtail/rfcs/pull/72">RFC 72: Background workers</a>.</p>

<h3 id="greener-coding-wagtails-climate-impact">Greener coding: Wagtail’s climate impact</h3>

<p>We’re starting to have a better understanding of the<a href="https://github.com/wagtail/wagtail/discussions/8843">climate impact of Wagtail</a> as a CMS, and how we can reduce it. We want to integrate our findings into Wagtail’s direction, and make concrete improvements to the project to reduce related carbon emissions.</p>

<p>This project is part of a partnership with the <a href="https://www.thegreenwebfoundation.org/">Green Web Foundation</a>, with mentors from both organisations.</p>

<h2 id="how-to-participate">How to participate</h2>

<p>Head over to our <a href="https://wagtail.org/gsoc">GSoC documentation</a> and <a href="https://github.com/wagtail/gsoc/discussions">GSoC Discussions</a>. Review our contributor guide, and come say hi!</p>

<h2 id="whats-next">What’s next</h2>

<p>We hope to hear from a lot of newcomers through the <a href="https://developers.google.com/open-source/gsoc/timeline">application period</a>, where candidates get to know different communities and apply to projects. We’ll make sure to share more information about projects that are going ahead and their respective contributors once details are confirmed, closer to the summer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2023 web conferences]]></title>
    <link href="https://thib.me/2023-web-conferences"/>
    <updated>2023-01-08T17:42:03+00:00</updated>
    <id>https://thib.me/2023-web-conferences</id>
    <content type="html"><![CDATA[<p>Here is a small list of conferences I put together for 2023, as I was looking for speaking opportunities, with a particular focus on Europe and America. Hope this helps!</p>

<!-- more -->

<h2 id="uk-govcamp-2023">UK GovCamp 2023</h2>

<p>Saturday 21 January 2023. Unconference, CFP on the day.</p>

<p><a href="https://www.ukgovcamp.com/2022/10/05/were-back/">https://www.ukgovcamp.com/2022/10/05/were-back/</a></p>

<h2 id="djangoday-cph-2023">DjangoDay CPH 2023</h2>

<p>Autumn 2023. No CFP currently.</p>

<p><a href="https://2023.djangoday.dk/">https://2023.djangoday.dk/</a></p>

<h2 id="pycon-us-2023">PyCon US 2023</h2>

<p>Salt Lake City, Utah - April 19, 2023 - April 27, 2023.</p>

<p><a href="https://us.pycon.org/2023/">https://us.pycon.org/2023/</a></p>

<h2 id="cityjs-london">CityJS London</h2>

<p>10-12th April 2023.</p>

<p><a href="https://london.cityjsconf.org/">https://london.cityjsconf.org/</a></p>

<h2 id="python-web-conf">Python Web Conf</h2>

<p>March 13 - 17 2023. Online.</p>

<p><a href="https://2023.pythonwebconf.com/">https://2023.pythonwebconf.com/</a></p>

<h2 id="mixit-2023">MiXiT 2023</h2>

<p>Lyon - April 13th &amp; 14th, 2023</p>

<p><a href="https://mixitconf.org/en/">https://mixitconf.org/en/</a></p>

<h2 id="pycon-italy-2023">PyCon Italy 2023</h2>

<p>Florence, 25-28 May 2023</p>

<p><a href="https://pycon.it/en">https://pycon.it/en</a></p>

<h2 id="pixel-pioneers-2023">Pixel Pioneers 2023</h2>

<p>16 June 2023, Bristol. No CFP.</p>

<p><a href="https://pixelpioneers.co/">https://pixelpioneers.co/</a></p>

<h2 id="halfstack-newquay-2023">HalfStack Newquay 2023</h2>

<p>Friday 23rd of June 2023, 10am - Late. Newquay (/ˈnjuːki/) (UK). CFP under way, no deadline.</p>

<p>Creative JavaScript and web development.</p>

<p><a href="https://halfstackconf.com/newquay/">https://halfstackconf.com/newquay/</a></p>

<h2 id="canux-2023">CanUX 2023</h2>

<p>Nov 1-4 in Ottawa, Canada.</p>

<p><a href="https://canux.io/">https://canux.io/</a></p>

<h2 id="a11yto-conf">#a11yTO Conf</h2>

<p>Downtown Toronto October 18th-21st</p>

<p><a href="https://a11yto.com/">https://a11yto.com/</a></p>

<h2 id="all-things-open-2023">All Things Open 2023</h2>

<p>October 15 – 17, Raleigh, NC.</p>

<p><a href="https://www.allthingsopen.org/">https://www.allthingsopen.org/</a></p>

<h2 id="djangocon-us-2023">DjangoCon US 2023</h2>

<p>Durham, North Carolina – October 16-20, 2023.</p>

<p><a href="https://2023.djangocon.us/">https://2023.djangocon.us/</a></p>

<h2 id="pycon-uk-2023">PyCon UK 2023</h2>

<p>Friday 22nd September to Monday 25th September 2023. No CFP announced yet.</p>

<p><a href="https://2023.pyconuk.org/">https://2023.pyconuk.org/</a></p>

<h2 id="djangocon-eu-2023">DjangoCon EU 2023</h2>

<p>29th May - 2nd June 2023</p>

<p><a href="https://2023.djangocon.eu/">https://2023.djangocon.eu/</a></p>

<h2 id="other-lists">Other lists</h2>

<ul>
  <li><a href="https://confs.tech/">https://confs.tech/</a></li>
  <li><a href="https://frontendfront.com/conferences/">https://frontendfront.com/conferences/</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Measuring dark mode’s energy savings]]></title>
    <link href="https://thib.me/measuring-dark-mode-energy-savings"/>
    <updated>2022-11-23T21:18:03+00:00</updated>
    <id>https://thib.me/measuring-dark-mode-energy-savings</id>
    <content type="html"><![CDATA[<p>I’ve heard lots over the year that “dark themes for sites use up less energy”. Last week we bought a new OLED TV, which is the first OLED device I’ve ever owned, so I finally got a chance to experience whether / how much that was true.</p>

<!-- more -->

<p>So I tested <a href="https://guide.wagtail.org/en-latest/">guide.wagtail.org</a>, on which we recently added a dark theme, displaying the homepage with the TV plugged into a watt meter.</p>

<ul>
  <li>With the light theme, the TV uses 63W.</li>
  <li>With the dark theme, it uses 34W.</li>
</ul>

<p>That’s a stark difference but it gets worse: this TV has lots of onboard processing, so turning off the panel itself with everything else on, the TV still consumes 31W. Which means the TV panel consumes 3W to display in the dark theme, and 33W, 10x more, to display the light theme.</p>

<p>This reduction in power consumption only applies to OLED devices, which have a limited market share but are getting more common.</p>

<h2 id="testing-a-real-world-website">Testing a real-world website</h2>

<p>The Wagtail user guide is a real production site but doesn’t necessarly represent a typical site: it’s text-heavy, even on its homepage. Let’s now try out <a href="https://www.rnib.org.uk/">rnib.org.uk</a>, for which my company recently implemented a dark theme.</p>

<p>Here’s the results on my TV:</p>

<p><img src="/images/blog/measuring-dark-mode-energy-savings/rnib-oled-energy.jpg" alt="Side-by-side shots of the RNIB website with a power meter in front. On the left is a light theme where the power meter says 59.1. On the right dark theme and the power meter says 35.8" /></p>

<ul>
  <li>With the light theme, the TV uses 59.1W.</li>
  <li>With the dark theme, the TV uses 35.8W.</li>
</ul>

<p>Assuming the  same 31W for TV components other than the panel, this means a panel consumption of 28W for the light theme, and 4.8W for the dark theme. That’s a 83% reduction in power consumption.</p>

<p>And another example with Wagtail’s dark mode:</p>

<p><img src="/images/blog/measuring-dark-mode-energy-savings/energy-usage-dark-mode-wagtail.jpg" alt="Side-by-side shots of Wagtail in light and dark mode" /></p>

<ul>
  <li>With the light theme, the TV uses 57.0W.</li>
  <li>With the dark theme, the TV uses 33.4W.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Outreachy: welcoming new contributors to open source]]></title>
    <link href="https://thib.me/outreachy-welcoming-new-contributors-to-open-source"/>
    <updated>2022-10-10T18:50:00+00:00</updated>
    <id>https://thib.me/outreachy-welcoming-new-contributors-to-open-source</id>
    <content type="html"><![CDATA[<p>For the first time, Wagtail is joining Outreachy’s open source internships program</p>

<!-- more -->

<p><img src="/images/blog/outreachy-welcoming-new-contributors-to-open-source/outreachy-banner.jpg" alt="Outreachy - Internships supporting diversity in Free and Open Source Software" /></p>

<p>As an experienced open source contributor, onboarding newcomers into the world of open source is amongst the most rewarding tasks. After a successful participation to <a href="https://wagtail.org/blog/google-summer-of-code-2022-wagtail-midterm/">this year’s Google Summer of Code</a>, we’re back at it already with <a href="https://www.outreachy.org/">Outreachy</a>, joining their December 2022 cohort.</p>

<h2 id="what-is-outreachy">What is Outreachy</h2>

<p>Outreachy provides <strong>internships in open source and open science.</strong> The program provides internships to people subject to systemic bias and impacted by under-representation in the technical industry where they are living. Internships are fully remote, over 3 months, with interns receiving a fair stipend to support their work.</p>

<p>For Wagtail, this type of program is one of the best ways to work with more diverse contributors. We’re elated to have been selected, and hope we’ll get to work with between one and three new contributors this year.</p>

<h2 id="the-project-ideas">The project ideas</h2>

<p>Compared to Google Summer of Code, Outreachy only allows mentors to propose project ideas, rather than candidates. We’ve earmarked three project ideas.</p>

<h3 id="a-built-in-accessibility-checker-for-wagtail">A built-in accessibility checker for Wagtail</h3>

<p>This project is fundamental to meeting our <a href="https://wagtail.org/accessibility/">accessibility commitments</a>. The primary goal is to integrate an existing accessibility test suite within the CMS in a way that takes advantage of the tool’s capabilities and Wagtail’s UI specificities. We envision this being part of Wagtail’s content previews: as the page content changes, authors see what the published page would look like, and get feedback on accessibility issues.</p>

<p>Here is a sneak peak at our first prototype:</p>

<p><img src="/images/blog/outreachy-welcoming-new-contributors-to-open-source/sa11y-prototype.png" alt="Screenshot of a prototype accessibility checker built into Wagtail's live preview" /></p>

<p><em>For more information about this project, to ask questions and provide feedback, follow</em> <a href="https://github.com/wagtail/wagtail/discussions/9262"><em>discussion #9262 Built-in Accessibility Checker</em></a><em> on GitHub.</em></p>

<h3 id="improving-wagtails-editor-guide">Improving Wagtail’s editor guide</h3>

<p>This project follows through <a href="https://wagtail.org/blog/google-summer-of-code-wagtail-editor-guide/">Hitansh Shah’s GSoC project</a>, where he created a new site for the Editor Guide documentation, with support from the project mentors. The new site looks fabulous:</p>

<p><img src="/images/blog/outreachy-welcoming-new-contributors-to-open-source/editor-guide.png" alt="Editor Guide landing page before-after" /></p>

<p>Now the next step is simply to revamp the content! This wasn’t part of Hitansh’s project, and is the perfect follow-up. We’re also very happy to propose a project idea where there is <strong>no need for contributors to know how to code</strong>.</p>

<p><em>For more information about this project, to ask questions and provide feedback, follow <a href="https://github.com/wagtail/guide/discussions/116">discussion #116 Outreachy: Improve user guide documentation for Wagtail</a>.</em></p>

<h3 id="stimulus-for-interactive-widgets-in-wagtail">Stimulus for interactive widgets in Wagtail</h3>

<p>Following the leadership of our contributor LB, our UI team has been carefully considering how to bring Wagtail’s JavaScript interactivity to modern standards. This project is the natural follow-up to LB’s excellent <a href="https://github.com/wagtail/rfcs/pull/78">RFC #78 for us to adopt Stimulus</a>: rolling it out across large swaths of the user interface.</p>

<p>The RFC is still going through the last stages of validation, so is the best way to follow up or comment on this project!</p>

<h2 id="how-to-participate">How to participate</h2>

<p>For aspiring newcomers already accepted in the December 2022 Outreachy cohort, head over to our <a href="https://github.com/wagtail/wagtail/wiki/Outreachy-2022">Outreachy 2022 wiki page</a> for more information about Wagtail, good resources, and a list of initial tasks.</p>

<p>For everyone else, we’d love to hear your thoughts on the project ideas, and are also actively looking for additional support so we can confidently take on all three projects. Join us in #outreachy on <a href="https://github.com/wagtail/wagtail/wiki/Slack">Wagtail’s Slack workspace</a>.</p>

<h2 id="whats-next">What’s next</h2>

<p>We hope to hear from a lot of newcomers through the <a href="https://www.outreachy.org/docs/community/#current-timeline">initial contribution period</a>, where candidates get to know different communities and apply to projects. We’ll make sure to share more information about projects that are going ahead and their respective contributors once details are confirmed, towards the end of November.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Summer of Code 2022 for Wagtail]]></title>
    <link href="https://thib.me/google-summer-of-code-2022-for-wagtail"/>
    <updated>2022-07-14T18:50:00+00:00</updated>
    <id>https://thib.me/google-summer-of-code-2022-for-wagtail</id>
    <content type="html"><![CDATA[<p>This year, Wagtail gets to take part in Google Summer of Code independently!</p>

<!-- more -->

<p>We are participating with three projects:</p>

<ul>
  <li><a href="https://github.com/wagtail/wagtail/discussions/8193">Contrast Themes by Anuja Raj Verma</a></li>
  <li><a href="https://github.com/wagtail/wagtail/discussions/7824">Editor’s Guide - A standalone project by Hitansh Shah</a></li>
  <li><a href="https://github.com/wagtail/wagtail/discussions/8156">Toolkit for StreamField data migrations in Wagtail by Sandil Ranasinghe</a></li>
</ul>

<p>And we have a fourth project independently sponsored by Torchbox: <a href="https://github.com/wagtail/wagtail/discussions/8158">UX Unification by Paarth Agarwal</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MiXiT 2022: The 97.4% North Star]]></title>
    <link href="https://thib.me/the-97-4-percent-north-star"/>
    <updated>2022-05-25T08:50:00+00:00</updated>
    <id>https://thib.me/the-97-4-percent-north-star</id>
    <content type="html"><![CDATA[<p>Slides for my <a href="https://mixitconf.org/fr/2022/the-97-4-north-star">MiXiT 2022 talk</a>.</p>

<!-- more -->

<iframe src="https://player.vimeo.com/video/726166919?h=c0d26f9453&amp;title=0&amp;byline=0&amp;portrait=0" width="640" height="360" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen=""></iframe>

<ul>
  <li><a href="https://docs.google.com/presentation/d/1SdXC4eiPqhK3gvdV9pMsarEHqSzooPoUxRVoJrBT3iQ/edit?usp=sharing">Google Slides; The 97.4% North Star - Thibaud Colas - MiXiT 2022</a></li>
  <li><a href="https://drive.google.com/file/d/1TjCmQdEKC3pQ12N_ifRgGnReAnzvAGv_/view?usp=sharing">PDF export (4MB); The 97.4% North Star - Thibaud Colas - MiXiT 2022</a></li>
  <li><a href="https://docs.google.com/document/d/1nGrmreQjwP3be5Y0LNW-WPU4lLv1Qsv5nozlBvEZQkw/edit?usp=sharing">Plain-text export; The 97.4% North Star - Thibaud Colas - MiXiT 2022</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript and React skills benchmark]]></title>
    <link href="https://thib.me/js-react-skills-benchmark"/>
    <updated>2022-05-03T18:50:00+00:00</updated>
    <id>https://thib.me/js-react-skills-benchmark</id>
    <content type="html"><![CDATA[<p>As a follow-up to my React training goals for front-end developers, here is a list of React and JS skills across different levels of expertise. This is meant to facilitate self-score themselves.</p>

<!-- more -->

<h2 id="javascript">JavaScript</h2>

<h3 id="beginner">Beginner</h3>

<h4 id="vanilla-javascript-fundamentals">Vanilla JavaScript fundamentals</h4>

<ul>
  <li>Knows about ES modules – named and default exports</li>
  <li>Knows what control structures and Array methods to use for iteration</li>
  <li>Understands scopes, hoisting, closures, <code class="language-plaintext highlighter-rouge">const</code> vs. <code class="language-plaintext highlighter-rouge">let</code></li>
  <li>Uses template literals for string concatenation</li>
  <li>Understands destructuring, and the spread and rest operators</li>
  <li>Understands when to use and not to use regular expressions</li>
  <li>Understands the difference between mutable and immutable data structures and can describe common issues associated with their use.</li>
  <li>Can write asynchronous code with callbacks and Promises</li>
  <li>Can write basic error handling code with exception handling and console APIs</li>
  <li>Can write code to execute on a timer or interval with the right APIs</li>
</ul>

<h4 id="dom-apis-fundamentals">DOM APIs fundamentals</h4>

<ul>
  <li>Knows what jQuery does and why it’s no longer relevant</li>
  <li>Knows about cross-browser support requirements and how to check support for a given technology</li>
  <li>Knows how to manage UI animations with JavaScript</li>
  <li>Can manage DOM event listeners and knows what common performance pitfalls to look out for with user-initiated events</li>
  <li>Can use throttling or debounce for a performance-sensitive event</li>
  <li>Can manipulate DOM elements, adding or removing them, setting attributes</li>
</ul>

<h4 id="javascript-tooling-fundamentals">JavaScript tooling fundamentals</h4>

<ul>
  <li>Knows what Node.js is and how to install a given version</li>
  <li>Can set up and use the JS tooling on wagtail-kit autonomously</li>
  <li>Knows how to use the browser DevTools Console panel</li>
  <li>Knows how to use the browser DevTools Elements panel</li>
  <li>Knows how to use a REPL for JavaScript</li>
  <li>Understands the npm packages ecosystem and the npm CLI</li>
  <li>Knows about the package.json and how to install dependencies</li>
  <li>Knows about Prettier, ESLint, Jest, and how to run them</li>
  <li>Knows what Babel and Webpack are for</li>
</ul>

<h4 id="javascript-as-a-language-bonus-points">JavaScript as a language (bonus points)</h4>

<ul>
  <li>Knows about the history of JavaScript – Brendan Eich, the 10 days, TC-39, ECMA-262</li>
  <li>Has watched Wat</li>
  <li>Knows about JSFuck - Write any JavaScript with 6 Characters: <code class="language-plaintext highlighter-rouge">[]()!+</code></li>
</ul>

<h3 id="intermediate">Intermediate</h3>

<h4 id="vanilla-js--dom-apis-intermediate">Vanilla JS &amp; DOM APIs intermediate</h4>

<ul>
  <li>Has read the Airbnb JavaScript styleguide</li>
  <li>Can use requestAnimationFrame and requestIdleCallback to defer expensive computations</li>
  <li>Knows how and when to use regular expressions, and can use them for basic string pattern matching</li>
  <li>Knows all of the ES modules syntax for static imports</li>
  <li>Knows all of the syntax of ES6 classes, and when to use classes</li>
  <li>Understands event propagation in the DOM and when to customise it with <code class="language-plaintext highlighter-rouge">stopPropagation</code>, when to rely on bubbling vs capture</li>
  <li>Is aware of TypeScript and understands what static types bring to JavaScript</li>
  <li>Is aware of other compile-to-JS languages and understands their value proposition: Dart, Elm, CoffeeScript, PureScript, ReasonML, ClojureScript, Opal</li>
  <li>Is aware of WebAssembly’s value proposition</li>
  <li>Knows how to assess the quality of a npm package: popularity, support, security, accessibility, performance</li>
</ul>

<h4 id="testing-javascript-fundamentals">Testing JavaScript fundamentals</h4>

<ul>
  <li>Can write simple unit tests with Jest</li>
  <li>Can test DOM manipulation code with Jest</li>
  <li>Knows how to use Jest in watch mode with different filters</li>
  <li>Understands what test coverage represents, and how to view it with Jest</li>
  <li>Understands the difference between running code in tests in Node and in browsers</li>
  <li>Is aware of tools to automate browser testing</li>
  <li>Knows about code complexity and how to assess it for a given implementation</li>
</ul>

<h4 id="debugging-javascript">Debugging JavaScript</h4>

<ul>
  <li>Can use the different console APIs</li>
  <li>Knows how to set and manage breakpoints in the browser DevTools debugger</li>
  <li>Knows what the call stack is and how to navigate up and down the stack in a debugger</li>
  <li>Understands the differences between source and output JavaScript, and what source maps are for</li>
  <li>Knows what JS error monitoring is for, and how to use it with Sentry</li>
  <li>Is aware of potential performance issues in JavaScript and options to investigate those issues</li>
</ul>

<h4 id="javascript-as-a-mindset-bonus-points">JavaScript as a mindset (bonus points)</h4>

<ul>
  <li>Understands what ASI does and a common case where it can’t be relied on</li>
  <li>Knows what the output of <code class="language-plaintext highlighter-rouge">{[{}]:[{}]}</code> is</li>
  <li>Knows about with statements and labels</li>
</ul>

<h3 id="advanced">Advanced</h3>

<h4 id="vanilla-js--dom-apis-advanced">Vanilla JS &amp; DOM APIs advanced</h4>

<ul>
  <li>Can use functional programming idioms in JavaScript: currying, partial application, method chaining</li>
  <li>Can use all common Array iteration methods: <code class="language-plaintext highlighter-rouge">filter</code>, <code class="language-plaintext highlighter-rouge">map</code>, <code class="language-plaintext highlighter-rouge">some</code>, <code class="language-plaintext highlighter-rouge">every</code>, <code class="language-plaintext highlighter-rouge">reduce</code></li>
  <li>Can manipulate URLs in JavaScript with standard library <code class="language-plaintext highlighter-rouge">URL</code> and <code class="language-plaintext highlighter-rouge">URLSearchParams</code> APIs</li>
  <li>Can use <code class="language-plaintext highlighter-rouge">Map</code> and <code class="language-plaintext highlighter-rouge">Set</code> objects</li>
  <li>Can use ES dynamic imports</li>
  <li>Is aware of Web Components – high-level capabilities and common APIs</li>
  <li>Can use shallow or deep copy patterns as appropriate to create fully immutable code.</li>
  <li>Can get up to speed and be productive with JS frameworks such as Vue, Svelte, Alpine.js, Stimulus, Angular</li>
  <li>Can use vanilla JS date manipulation methods to read and format dates, times, datetimes, including usage of modern Temporal APIs</li>
</ul>

<h4 id="typescript-fundamentals">TypeScript fundamentals</h4>

<ul>
  <li>Understands what TypeScript brings compared to vanilla JavaScript</li>
  <li>Can use TypeScript syntax to add type annotations to vanilla JS code with built-in types</li>
  <li>Can define basic custom types with union types and interfaces</li>
  <li>Can use generics for arrays</li>
  <li>Can use the <code class="language-plaintext highlighter-rouge">typeof</code>, <code class="language-plaintext highlighter-rouge">keyof</code>, <code class="language-plaintext highlighter-rouge">const</code> TypeScript keywords to reduce boilerplate in type definitions</li>
  <li>Understands what type narrowing is and how to implement basic typeof or null check type guards</li>
</ul>

<h4 id="api-integrations--data-management">API integrations &amp; data management</h4>

<ul>
  <li>Understands the difference between callbacks, promises, and async/await</li>
  <li>Can use <code class="language-plaintext highlighter-rouge">async</code> / <code class="language-plaintext highlighter-rouge">await</code> for asynchronous code</li>
  <li>Understands the data flow when using Redux with async action creators, with “start”, “success”, “error” actions for a given API call</li>
  <li>Can use the <code class="language-plaintext highlighter-rouge">fetch</code> API with JSON and <code class="language-plaintext highlighter-rouge">FormData</code> to GET or POST data to API endpoints</li>
  <li>Knows how to abort a fetch request</li>
  <li>Can use client-side routing APIs to store state in the URL</li>
</ul>

<h4 id="progressive-web-apps-pwa">Progressive Web Apps (PWA)</h4>

<ul>
  <li>Understands what Service Workers are for and when to use them</li>
  <li>Can set up offline support with a high-level library like Workbox</li>
  <li>Has awareness of PWA limitations across different browsers</li>
  <li>Can use <code class="language-plaintext highlighter-rouge">sessionStorage</code>, <code class="language-plaintext highlighter-rouge">localStorage</code> and cookie APIs to store data client-side</li>
</ul>

<h4 id="javascript-as-an-ecosystem-bonus-points">JavaScript as an ecosystem (bonus points)</h4>

<ul>
  <li>Knows about different popular JS implementations and their high-level characteristics: V8, JavaScriptCore, Deno</li>
  <li>Knows where to look for the most recent stage-2/3 proposals</li>
  <li>Knows about the “small modules philosophy” and its pitfalls</li>
</ul>

<h3 id="expert">Expert</h3>

<h4 id="vanilla-js--dom-apis-mastery">Vanilla JS &amp; DOM APIs mastery</h4>

<ul>
  <li>Can use functional JavaScript array iteration idioms to manipulate objects, with Object.entries, Object.fromEntries, and other methods</li>
  <li>Understands common encoding issues in JavaScript, UTF-16 vs. UTF-32, and can implement Unicode-aware (surrogate pairs) string processing</li>
  <li>Can create a JS API based on higher-order functions and decorators</li>
  <li>Knows about the <code class="language-plaintext highlighter-rouge">MutationObserver</code> and <code class="language-plaintext highlighter-rouge">IntersectionObserver</code> APIs</li>
  <li>Can use JS Intl and Date APIs to work across dates and numbers in different time zones and locales</li>
  <li>Can use browser DevTools to troubleshoot performance issues with JS execution flame graphs, memory and CPU profiling</li>
  <li>Understands what the global object is and how it differs between the main thread, web workers, and Node</li>
  <li>Can use the performance APIs to manually instrument code</li>
</ul>

<h4 id="typescript-mastery">TypeScript mastery</h4>

<ul>
  <li>Understands the performance considerations of type definitions and common mitigations (for example reliance on inference, interfaces vs. type aliases)</li>
  <li>Can write correct module declaration files for APIs of third-party packages</li>
  <li>Can write custom generic types and conditional types</li>
  <li>Can demonstrate usage of 5 of TypeScript’s utility types in real-world projects such as <code class="language-plaintext highlighter-rouge">Omit</code>, <code class="language-plaintext highlighter-rouge">Readonly</code>, <code class="language-plaintext highlighter-rouge">Required</code>, <code class="language-plaintext highlighter-rouge">Partial</code>, <code class="language-plaintext highlighter-rouge">NonNullable</code>.</li>
  <li>Knows the difference between any, never, unknown types</li>
</ul>

<h4 id="client-side-architecture-mastery">Client-side architecture mastery</h4>

<ul>
  <li>Can use the <code class="language-plaintext highlighter-rouge">FileReader</code>, <code class="language-plaintext highlighter-rouge">File</code>, and <code class="language-plaintext highlighter-rouge">ArrayBuffer</code> APIs to process files client-side</li>
  <li>Can implement cross-origin communication via iframes and postMessage</li>
  <li>Can demonstrate an understanding of advanced Redux patterns such as middleware for state saves or actions’ meta processing</li>
  <li>Can implement state normalisation patterns within Redux</li>
  <li>Can use Web Workers to move processing off the main thread</li>
</ul>

<h4 id="javascript-as-a-runtime-bonus-points">JavaScript as a runtime (bonus points)</h4>

<ul>
  <li>Understands when Just-In-Time compilation kicks in, in which engines, and how to optimise for it</li>
  <li>Knows how to do memory profiling &amp; heap snapshots in V8 or Chrome</li>
  <li>Understands how vulnerabilities like Spectre and Meltdown affect JavaScript</li>
</ul>

<hr />

<h2 id="react">React</h2>

<h3 id="beginner-1">Beginner</h3>

<h4 id="react-ui-components-fundamentals">React UI components fundamentals</h4>

<ul>
  <li>Understands React’s component-driven, declarative UI paradigm</li>
  <li>Can use props to pass data between parent and child components, with default values where needed</li>
  <li>Can use PropTypes or TypeScript to validate a component’s props</li>
  <li>Understands JSX syntax compared to HTML</li>
  <li>Has a high-level understanding of the component lifecycle</li>
  <li>Can manage local component state with useState</li>
  <li>Can implement a <code class="language-plaintext highlighter-rouge">useEffect</code> hook to run code when a component mounts and unmounts</li>
  <li>Can set data on a parent component with a callback</li>
  <li>Has been through official Thinking in React tutorial Thinking in React – React</li>
</ul>

<h4 id="react-tooling-fundamentals">React tooling fundamentals</h4>

<ul>
  <li>Understands what a JSX transform is, what popular parsers include one</li>
  <li>Knows about React-specific aspects of Prettier, ESLint, Jest, and how to run those tools</li>
  <li>Can use basic Inspect functionality of the React DevTools to troubleshoot rendering issues</li>
  <li>Knows what different types of testing are possible for React components with tools like Jest and Storybook</li>
  <li>Can update React unit tests and Storybook stories</li>
</ul>

<h4 id="react-as-a-paradigm-shift-bonus-points">React as a paradigm shift (bonus points)</h4>

<ul>
  <li>Knows why React calls itself a library rather than a framework</li>
  <li>Knows the reasons why React uses <code class="language-plaintext highlighter-rouge">className</code> rather than the <code class="language-plaintext highlighter-rouge">class</code> attribute</li>
  <li>Understands what React refers to by “Escape Hatches”</li>
</ul>

<h3 id="intermediate-1">Intermediate</h3>

<h4 id="react-ui-components-intermediate">React UI components intermediate</h4>

<ul>
  <li>Knows what React’s <code class="language-plaintext highlighter-rouge">key</code> prop is for and the consequences of using it incorrectly</li>
  <li>Understand how <code class="language-plaintext highlighter-rouge">useEffect</code> deps behave with primitives vs object references (common issue is when an empty object or array is used as a default value)</li>
  <li>Knows when to use <code class="language-plaintext highlighter-rouge">useCallback</code> to have a stable function reference</li>
  <li>Can use <code class="language-plaintext highlighter-rouge">dangerouslySetInnerHTML</code> to integrate with legacy HTML, understanding the security implications</li>
  <li>Knows what props spreading is and why it should generally be avoided</li>
  <li>Can use refs to integrate with vanilla DOM manipulation</li>
  <li>Can create new components from scratch following a basic file structure co-locating components, their tests, and styles</li>
  <li>Knows what React’s <code class="language-plaintext highlighter-rouge">Portal</code> API is for and how to use it</li>
</ul>

<h4 id="react-state-management-fundamentals">React state management fundamentals</h4>

<ul>
  <li>Understands how React’s data flow differs from two-way data binding</li>
  <li>Knows in what cases to reach for <code class="language-plaintext highlighter-rouge">useState</code>, <code class="language-plaintext highlighter-rouge">useReducer</code>, Context, and Redux</li>
  <li>Knows what it means to “lift state up” in a React component hierarchy, and how to do it</li>
  <li>Can use <code class="language-plaintext highlighter-rouge">useState</code> and <code class="language-plaintext highlighter-rouge">useReducer</code> to manage state within components</li>
  <li>Knows about Context APIs to share state indirectly in a component hierarchy</li>
  <li>Can set up Redux Toolkit on a new project with a basic slice</li>
  <li>Can use the Redux DevTools to troubleshoot state storage and propagation issues</li>
</ul>

<h4 id="typescript-fundamentals-1">TypeScript fundamentals</h4>

<ul>
  <li>Understands what TypeScript brings compared to vanilla JavaScript</li>
  <li>Can use TypeScript syntax to add type annotations to vanilla JS code with built-in types</li>
  <li>Can define basic custom types with union types and interfaces</li>
  <li>Can use generics for arrays</li>
  <li>Can use the <code class="language-plaintext highlighter-rouge">typeof</code> and <code class="language-plaintext highlighter-rouge">keyof</code> TypeScript keywords to reduce boilerplate in type definitions</li>
  <li>Understands what type narrowing is and how to implement basic <code class="language-plaintext highlighter-rouge">typeof</code> or null check type guards</li>
  <li>Can create interfaces for the props and states of React components, including annotations for children</li>
</ul>

<h4 id="react-tooling-intermediate">React tooling intermediate</h4>

<ul>
  <li>Can write Storybook stories for components from scratch, with appropriate usage of CSF and args APIs</li>
  <li>Can write unit tests for components from scratch, with appropriate usage of shallow vs. deep rendering, snapshot testing, and different methods to query sub-elements of a component</li>
  <li>Can set up and configure React linting with <code class="language-plaintext highlighter-rouge">eslint-config-torchbox</code> on a project</li>
  <li>Can use the profiler in the React DevTools to troubleshoot performance issues</li>
  <li>Knows about the differences between React’s dev and production modes, as well as StrictMode</li>
</ul>

<h4 id="react-mindset-bonus-points">React mindset (bonus points)</h4>

<ul>
  <li>Can name two libraries that are API-compatible with vanilla React with a focus on performance</li>
  <li>Can name who the creators of React and Redux are</li>
  <li>Knows what it means to eject a create-react-app project</li>
</ul>

<h3 id="advanced-1">Advanced</h3>

<h4 id="react-architecture">React architecture</h4>

<ul>
  <li>Understands the differences between React versions 16, 17, 18, and knows what React API to use to help check whether a given app is compatible with future versions</li>
  <li>Can help make project-based decisions on when it is suitable to adopt React and what the approach should be.</li>
  <li>Can structure a React app’s JS code from scratch with 10+ components</li>
  <li>Can implement error boundaries at appropriate places in the React component hierarchy</li>
  <li>Knows about problems with managing form state in React, what libraries are available</li>
  <li>Can use a React forms library to build a form with client-side and server-side validation</li>
  <li>Can write React wrappers for any UI widget written with another library (for example integrating a non-React date picker)</li>
  <li>Can set up a CSS-in-JS library for React components</li>
</ul>

<h4 id="react-state-management-intermediate">React state management intermediate</h4>

<ul>
  <li>Can structure Redux reducers and actions with or without Redux Toolkit with 3+ slices, following the Ducks pattern</li>
  <li>Can structure API integration code with Redux actions, including loading states and error handling, with or without RTK Query</li>
  <li>Can troubleshoot a React and Redux data manipulation issue on any project with React &amp; Redux DevTools only</li>
  <li>Knows when to reach out for memoization of state, or memoized components. Can implement it in practice, and deal with common issues with references</li>
</ul>

<h4 id="typescript-intermediate">TypeScript intermediate</h4>

<ul>
  <li>Knows about the different ways to type React components and why some are preferred to others</li>
  <li>Understands the performance considerations of type definitions and common mitigations (for example reliance on inference, interfaces vs. type aliases)</li>
  <li>Can write correct module declaration files for APIs of third-party packages</li>
  <li>Can write custom generic types and conditional types</li>
  <li>Can write or generate type annotations for GraphQL or REST APIs</li>
</ul>

<h4 id="single-page-apps-spa">Single-Page Apps (SPA)</h4>

<ul>
  <li>Can set up lazy-loading / code splitting of large components with the React.lazy API</li>
  <li>Can set up route-based lazy-loading / code splitting with a routing library and React.lazy</li>
  <li>Can set up client-side error monitoring with Sentry for a React app, integrating with error boundaries</li>
  <li>Can set up declarative client-side routing with a React library</li>
  <li>Knows how to test API integrations outside browsers, with tools like Postman or GraphiQL</li>
  <li>Knows how an SPA’s runtime characteristics can create issues with analytics software</li>
</ul>

<h4 id="react-outside-the-box-bonus-points">React outside the box (bonus points)</h4>

<ul>
  <li>Knows about XHP</li>
  <li>Can name three React rendering targets / libraries aside from react-dom and react-native</li>
  <li>Can name three compile-to-JS languages with declarative UI APIs similar to React</li>
</ul>

<h3 id="expert-1">Expert</h3>

<h4 id="react-architecture-mastery">React architecture mastery</h4>

<ul>
  <li>Can be a project lead on React builds</li>
  <li>Can create React app architectures from scratch through file structure, component hierarchy, application state structure, client-side routing structure</li>
  <li>Can create GraphQL and REST API integrations from scratch or with clients like Apollo</li>
  <li>Can set up an appropriate testing strategy for a React build between unit tests, e2e browser tests, and Storybook</li>
  <li>Knows how to create a design system UI library built on React components, including auto-generated documentation from props</li>
  <li>Knows about advanced APIs like cloning children and forwarding refs</li>
</ul>

<h4 id="single-page-apps-spa-advanced">Single-Page Apps (SPA) advanced</h4>

<ul>
  <li>Can advise on the tradeoffs of a SPA architecture, and appropriate mitigations for the most common limitations</li>
  <li>Knows how to set up authentication in a SPA project</li>
  <li>Can use bundle analysis tools to monitor and troubleshoot the size of JS bundles in a SPA build</li>
  <li>Can set up client-side performance monitoring instrumentation on a React app</li>
  <li>Can create SPA experiences with any React meta-framework such as Next.js or Remix</li>
</ul>

<h4 id="react-behind-the-scenes">React behind the scenes</h4>

<ul>
  <li>Knows how scheduling works in React and why they choose to leave it under the control of the library as much as possible</li>
  <li>Understands why React uses event delegation, how it’s implemented, and how it changed from React 16 to 17</li>
  <li>Knows what <code class="language-plaintext highlighter-rouge">__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED</code> is in React</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The State of Wagtail - Wagtail Space US 2022]]></title>
    <link href="https://thib.me/state-of-wagtail-wagtail-space-us-2022"/>
    <updated>2022-03-24T16:20:00+00:00</updated>
    <id>https://thib.me/state-of-wagtail-wagtail-space-us-2022</id>
    <content type="html"><![CDATA[<p>Here are the slides and my notes for my <a href="https://us.wagtail.space/">Wagtail Space US 2022</a> talk <a href="https://youtu.be/tttOiW_bSYM">State of Wagtail</a>.</p>

<!-- more -->

<p>Slides:</p>

<ul>
  <li><a href="https://docs.google.com/presentation/d/1XHkr0ijLX9b0YwQIXdshL51-J8cSH07tPm3jPWIk_eA/edit">Google Slides: State of Wagtail - Wagtail Space US 2022</a></li>
  <li><a href="https://drive.google.com/file/d/1rW_uhz4WuVOnv-KsvuldmLSO-r_DrVfu/view">PDF: State of Wagtail - Wagtail Space US 2022</a></li>
</ul>

<iframe title="(my) State of Wagtail – Thibaud Colas, Wagtail Space US 2022" width="560" height="315" src="https://www.youtube-nocookie.com/embed/tttOiW_bSYM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[State of Wagtail’s accessibility]]></title>
    <link href="https://thib.me/state-of-wagtail-accessibility"/>
    <updated>2022-02-28T07:42:03+00:00</updated>
    <id>https://thib.me/state-of-wagtail-accessibility</id>
    <content type="html"><![CDATA[<p>After <a href="https://wagtail.org/blog/announcing-wagtail-sub-teams/">6 months of operations</a>, we reflect on the progress our <a href="https://github.com/wagtail/wagtail/wiki/Wagtail-sub-teams#accessibility">accessibility team</a> has made, and go on the lookout for new contributors.</p>

<!-- more -->

<p>Accessibility has been on Wagtail’s roadmap for quite some time, and we’ve <a href="https://wagtail.org/blog/accessibility-team-reloaded/">reflected on our progress</a> in the past. Now’s a good time for us to do this again, and share our plans for the next few years.</p>

<h3 id="what-we-achieved-in-2021">What we achieved in 2021</h3>

<p>2021 has been a busy year for Wagtail’s <a href="https://github.com/wagtail/wagtail/wiki/Accessibility-team">accessibility team</a>. With 5 members on board last February, and <a href="https://github.com/SaptakS">Saptak Sengupta</a> joining us in July, we went through a lot of long-awaited changes.</p>

<ul>
  <li>We now have an <a href="https://wagtail.org/accessibility/">official accessibility statement</a>. This was the first time we publicly stated ATAG 2.0 as a conformance goal.</li>
  <li>We also published our <a href="https://docs.google.com/spreadsheets/d/1l7tnpEyJiC5BWE_JX0XCkknyrjxYA5T2aee5JgPnmi4/edit#gid=1433484179">(work in progress) accessibility audit</a>. It’s far from complete, but has already helped us prioritise specific improvements to the CMS.</li>
  <li>We made a big push to improve support for Windows high contrast mode as part of <a href="https://docs.wagtail.org/en/stable/releases/2.15.html#windows-high-contrast-support">Wagtail 2.15</a>.</li>
  <li>We were also involved with the development of large features, earlier than might have been the case in the past.</li>
</ul>

<h3 id="windows-high-contrast-mode">Windows high-contrast mode</h3>

<p>This significant effort is worth highlighting for a few reasons:</p>

<ul>
  <li>The whole backlog of improvement came from a <a href="https://trello.com/b/MnlPSvkD/wagtail-high-contrast">large audit</a> by <a href="https://github.com/kbayliss">Kyle Bayliss</a>, which allowed us to understand the bigger picture of which practices in our development might be causing issues.</li>
  <li>In contrast, we were able to split the fixes <a href="https://github.com/wagtail/wagtail/issues?q=is%3Aissue+sort%3Aupdated-desc+label%3A%22good+first+issue%22+label%3AAccessibility+is%3Aclosed+High-contrast+mode">over multiple tickets</a> to make those potential contributions more accessible to newcomers (in total, 12 people participated in those changes!).</li>
  <li>We got a sponsorship from <a href="https://assistivlabs.com/">Assistiv Labs</a> to simplify testing of Wagtail with different assistive technologies. Windows high contrast mode in particular was very hard for us to test until then.</li>
</ul>

<p>There is still a long way to go for us to achieve full support, but we feel better able to deliver this than ever. Here is what Windows high contrast mode looks like in Wagtail currently, tested via Assistiv Labs:</p>

<p><a href="/images/blog/state-of-wagtail-accessibility/whcm-wagtail.png"><img src="/images/blog/state-of-wagtail-accessibility/whcm-wagtail.png" alt="Screenshot of Windows high contrast mode in Assistiv Labs, with the main navigation opened over page listings" /></a></p>

<h3 id="what-we-didnt-achieve">What we didn’t achieve</h3>

<ul>
  <li>We were hoping to have accessibility team <a href="https://simonwillison.net/2021/Feb/19/office-hours/">office hours</a>, and never got round to starting this. If you would be interested, please <a href="https://github.com/wagtail/wagtail/wiki/Slack">let us know on Slack in #accessibility</a>!</li>
  <li>One of the key features we wanted to scope was accessibility testing built into the CMS – we made plans internally, but didn’t draft a formal proposal as we had hoped. More on that soon!</li>
</ul>

<h2 id="the-year-ahead">The year ahead</h2>

<p>The elephant in the room for Wagtail’s accessibility improvements is the <a href="https://github.com/wagtail/wagtail/discussions/7739">Page editor 2022</a> project, which accessibility team members are heavily involved with. This marks a clear transition for us: from frequently fixing issues piecemeal after the fact; to being involved in every feature’s planning, making sure accessibility is considered.</p>

<p>We also get to direct the scope of the project – for example, recommending a wholesale replacement of the current datepicker, rather than a restyling.</p>

<p>A practical example of our involvement is the production of annotations for UI semantics and behavior, following the <a href="https://dribbble.com/shots/6269661-Accessibility-Bluelines">Accessibility Bluelines</a> methodology:</p>

<p><a href="/images/blog/state-of-wagtail-accessibility/accessibility-bluelines.png"><img src="/images/blog/state-of-wagtail-accessibility/accessibility-bluelines.png" alt="Accessibility bluelines example for Wagtail, annotating the sidebar and top of the page editor" /></a></p>

<h3 id="accessibility-of-the-cms">Accessibility of the CMS</h3>

<p>We are and will be going through a lot of improvements:</p>

<ul>
  <li>Liaising with the Page editor 2022 project, and other features development, so accessibility requirements are included.</li>
  <li><a href="https://github.com/wagtail/wagtail/pull/7751">Automated accessibility testing</a> of all pull requests, so ongoing QA isn’t as reliant on manual testing.</li>
  <li>Rolling out the most important accessibility-related changes from the page editor project, to the rest of the CMS.</li>
</ul>

<p>We will also keep up with <a href="https://www.w3.org/WAI/standards-guidelines/wcag/new-in-22/">WCAG 2.2</a>’s publication, and drafts of <a href="https://w3c.github.io/silver/guidelines/">WCAG 3.0</a>.</p>

<h3 id="accessibility-of-sites-built-with-wagtail">Accessibility of sites built with Wagtail</h3>

<p>The biggest change here will be the inclusion of built-in accessibility tests, as part of page previews when editing content. This is par for the course of ATAG 2.0 conformance, and we’re also gradually integrating findings from the <a href="https://accessibilitycluster.com/">We4Authors Cluster</a> research project, which details the most important accessibility features in content management systems.</p>

<h2 id="how-you-can-help">How you can help</h2>

<p>Two things:</p>

<ul>
  <li>Regularly <a href="https://github.com/wagtail/wagtail/discussions/7739">provide feedback on the Page editor 2022</a> project, based on your experience with Wagtail and other content management systems.</li>
  <li>Consider joining our accessibility team! We are looking for new members for the next 6 months or so, from all backgrounds, all skillsets.</li>
</ul>

<p>In both cases, we’re particularly keen to hear from people who:</p>

<ul>
  <li>Have personal experience of access and functional needs, or who are regular users of assistive technologies.</li>
  <li>Work on UX, design, or content – and can help us understand the needs of our users.</li>
</ul>

<p>To chat to the accessibility team directly, reach out to us <a href="https://github.com/wagtail/wagtail/wiki/Slack">on Slack in #accessibility</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Prettier onto an existing project]]></title>
    <link href="https://thib.me/adding-prettier-existing-project"/>
    <updated>2022-02-04T21:18:03+00:00</updated>
    <id>https://thib.me/adding-prettier-existing-project</id>
    <content type="html"><![CDATA[<p><a href="https://prettier.io/">Prettier</a> is good. So good, it’s easy to get used to it, and subsequently want to retrofit it onto existing projects. Here’s a step-by-step guide and example: configuring and documenting Prettier and reformatting existing code, all the while making sure not to break other people’s work.</p>

<!-- more -->

<h2 id="the-example">The example</h2>

<p>All the steps described below are demonstrated publicly in a real-world project: Wagtail, via issue <a href="https://github.com/wagtail/wagtail/issues/6059">#6059 Automatic code formatting with Prettier</a>. The implementation was split into two PRs: <a href="https://github.com/wagtail/wagtail/pull/7908">#7908 Add Prettier configuration &amp; documentation</a>, <a href="https://github.com/wagtail/wagtail/pull/7912">#7912 Prettier reformatting</a>, and finally one extra commit, <a href="https://github.com/wagtail/wagtail/commit/7eb8730d7372dc6b4752308a7e3354b36810f32e">7eb8730d7372dc6b4752308a7e3354b36810f32e</a>.</p>

<p>Finally, here are <a href="https://github.com/wagtail/wagtail/issues/6059#issuecomment-1029941428">instructions on resolving conflicts</a> that weren’t directly stored in the repository (as this is a one-off task).</p>

<h2 id="why-two-prs-and-a-commit">Why two PRs and a commit</h2>

<p>I recommend always splitting the addition of any formatting tool into at least two PRs and the extra commit:</p>

<ol>
  <li>The first PR takes care of anything that requires careful review – configuration, integrations, documentation.</li>
  <li>The second PR takes care of the actual reformatting.</li>
  <li>Finally, the final commit is just there to finish setting up the <a href="https://git-scm.com/docs/git-blame#Documentation/git-blame.txt---ignore-revs-fileltfilegt"><code class="language-plaintext highlighter-rouge">.git-blame-ignore-revs</code> file for git’s <code class="language-plaintext highlighter-rouge">ignoreRevsFile</code></a>.</li>
</ol>

<h2 id="configuration">Configuration</h2>

<p>This is actually the simplest step.</p>

<ul>
  <li>Update the project’s <code class="language-plaintext highlighter-rouge">.editorconfig</code> first, as Prettier reads it (<a href="https://github.com/thibaudcolas/cookbook/blob/main/.editorconfig">here’s an example</a>).</li>
  <li>Create a <code class="language-plaintext highlighter-rouge">prettier.config.js</code> with any desired options.</li>
  <li>Create a <code class="language-plaintext highlighter-rouge">.prettierignore</code>. I’d recommend to add large folders in here to speed up Prettier looking for files when using very broad glob patterns.</li>
</ul>

<p>Personally I’ll always prefer to set all configuration options, even when using defaults. This saves having to remember what options are available that might not be set on the particular project when re-reviewing the configuration. I also always prefer using JavaScript for configuration – syntax highlighting and auto-formatting are dependable.</p>

<h3 id="which-languages-should-i-use-prettier-for">Which languages should I use Prettier for?</h3>

<p>I’d recommend all languages that Prettier supports, potentially with the exception of Markdown. Although the reformatting is excellent, enforcing a single format for documentation often feels cumbersome – particularly if the project’s documentation might often be updated by contributors with little knowledge of the project’s tooling.</p>

<p>If a supported language isn’t used, make sure to add its extension to the <code class="language-plaintext highlighter-rouge">.prettierignore</code> so the files are consistently skipped. Here’s an example:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Irrelevant files ignored for performance reasons.</span>
node_modules
public/
coverage/
vendor/
static
_build
<span class="c"># File types which Prettier supports but we don’t want auto-formatting.</span>
<span class="k">*</span>.md
<span class="c"># Files which contain incompatible syntax.</span>
<span class="k">*</span>.html
wagtail/admin/templates/wagtailadmin/edit_handlers/inline_panel.js
</code></pre></div></div>

<h2 id="integrations">Integrations</h2>

<p>I’ll always start with the same two commands:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"format"</span><span class="p">:</span><span class="w"> </span><span class="s2">"prettier --write '**/?(.)*.{css,scss,js,ts,tsx,json,yaml,yml}'"</span><span class="err">,</span><span class="w">
  </span><span class="nl">"lint:format"</span><span class="p">:</span><span class="w"> </span><span class="s2">"prettier --check '**/?(.)*.{css,scss,js,ts,tsx,json,yaml,yml}'"</span><span class="w">
</span></code></pre></div></div>

<p>The glob pattern might seem complicated – it’s wrapped in single quotes to prevent shell globbing (thus making it consistent cross-platform). It uses <code class="language-plaintext highlighter-rouge">**/?(.)*</code> so files are checked at all directory levels in the current folder, and regardless of whether file names start with a dot or not.</p>

<p>As to where those commands should run – generally in continuous integration, potentially in Git pre-commit hooks.</p>

<h3 id="pre-commit">pre-commit</h3>

<p>With the confusingly-named <a href="https://pre-commit.com/">pre-commit framework</a>, it looks like:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">repo</span><span class="pi">:</span> <span class="s">https://github.com/pre-commit/mirrors-prettier</span>
  <span class="na">rev</span><span class="pi">:</span> <span class="s">v2.5.1</span>
  <span class="na">hooks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">prettier</span>
      <span class="na">types_or</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">css</span><span class="pi">,</span> <span class="nv">scss</span><span class="pi">,</span> <span class="nv">javascript</span><span class="pi">,</span> <span class="nv">ts</span><span class="pi">,</span> <span class="nv">tsx</span><span class="pi">,</span> <span class="nv">json</span><span class="pi">,</span> <span class="nv">yaml</span><span class="pi">]</span>
</code></pre></div></div>

<p>Note <code class="language-plaintext highlighter-rouge">types_or</code> aren’t always file extensions, they’re <a href="https://github.com/pre-commit/identify/blob/master/identify/extensions.py">arbitrary identifiers</a> for some languages.</p>

<p>Here’s what I personally prefer – just bash:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># Fail on first line that fails.</span>
<span class="nb">set</span> <span class="nt">-e</span>

<span class="c"># Only keep staged files that are added (A), copied (C) or modified (M).</span>
<span class="nv">STAGED</span><span class="o">=</span><span class="si">$(</span>git <span class="nt">--no-pager</span> diff <span class="nt">--name-only</span> <span class="nt">--cached</span> <span class="nt">--diff-filter</span><span class="o">=</span>ACM<span class="si">)</span>
<span class="c"># Files which are only partly staged (eg. git add --patch).</span>
<span class="nv">PATCH_STAGED</span><span class="o">=</span><span class="si">$(</span>git <span class="nt">--no-pager</span> diff <span class="nt">--name-only</span> <span class="nt">--diff-filter</span><span class="o">=</span>ACM <span class="nv">$STAGED</span><span class="si">)</span>
<span class="c"># Files which are fully staged.</span>
<span class="nv">FULLY_STAGED</span><span class="o">=</span><span class="si">$(</span><span class="nb">comm</span> <span class="nt">-23</span> &lt;<span class="o">(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$STAGED</span><span class="s2">"</span><span class="o">)</span> &lt;<span class="o">(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$PATCH_STAGED</span><span class="s2">"</span><span class="o">)</span><span class="si">)</span>

<span class="nv">PRETTIER_STAGED</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-E</span> <span class="s1">'.(css|scss|js|ts|tsx|json|yaml|yml)$'</span> <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$STAGED</span><span class="s2">"</span> <span class="o">||</span> <span class="nb">true</span><span class="si">)</span>
<span class="nv">PRETTIER_FULLY_STAGED</span><span class="o">=</span><span class="si">$(</span><span class="nb">grep</span> <span class="nt">-E</span> <span class="s1">'.(css|scss|js|ts|tsx|json|yaml|yml)$'</span> <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$FULLY_STAGED</span><span class="s2">"</span> <span class="o">||</span> <span class="nb">true</span><span class="si">)</span>

<span class="c"># Format and re-stage fully staged files only.</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$PRETTIER_FULLY_STAGED</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span>
<span class="k">then
  </span>npx prettier <span class="nt">--write</span> <span class="nv">$PRETTIER_FULLY_STAGED</span>
  git add <span class="nv">$PRETTIER_FULLY_STAGED</span>
<span class="k">fi</span>

<span class="c"># Lint all staged files.</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$PRETTIER_STAGED</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span>
<span class="k">then
  </span>npx prettier <span class="nt">--check</span> <span class="nv">$PRETTIER_STAGED</span>
<span class="k">fi</span>
</code></pre></div></div>

<h3 id="ides">IDEs</h3>

<p>VS Code has excellent Prettier support. Use it. I personally prefer to default to <code class="language-plaintext highlighter-rouge">editor.formatOnSave</code> turned on, and only disable it per project that doesn’t have Prettier.</p>

<h3 id="continuous-integration">Continuous integration</h3>

<p>We want to make sure we run <code class="language-plaintext highlighter-rouge">npm run lint:format</code> on CI. Simple as that. Worth mentioning <a href="https://pre-commit.ci/">pre-commit.ci</a>, compatible with the same pre-commit framework as above, which runs formatting on your behalf and commits the changes to PRs. I personally don’t use it, but it works.</p>

<p>A common gotcha when setting up Prettier in CI is if your builds are optimised to only run when specific folders are changed – by definition, the Prettier checks will have to run whenever any file supported by Prettier changes.</p>

<h2 id="documentation">Documentation</h2>

<p>Make sure your contributors are aware Prettier is in use, and that there is a <code class="language-plaintext highlighter-rouge">npm run format</code> command available for cases where Prettier formatting doesn’t get automatically applied in an editor.</p>

<h2 id="git-blame-compatibility">Git blame compatibility</h2>

<p>GitHub makes it easy to skip a commit in the blame view. For git itself, we can use a <code class="language-plaintext highlighter-rouge">.git-blame-ignore-revs</code> file. <a href="https://github.com/prettier/prettier/blob/main/.git-blame-ignore-revs">Prettier itself</a> has an excellent example, which is self-documenting:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># git-blame ignored revisions</span>
<span class="c"># To configure, run</span>
<span class="c">#   git config blame.ignoreRevsFile .git-blame-ignore-revs</span>
<span class="c"># Requires Git &gt; 2.23</span>
<span class="c"># See https://git-scm.com/docs/git-blame#Documentation/git-blame.txt---ignore-revs-fileltfilegt</span>

<span class="c"># Prettier bump after release</span>
<span class="c"># 2.5.1</span>
4683a6284d53b913f129694a5be666fc55b06982
<span class="c"># 2.5.0</span>
846dbdd7e8c9deb315b3e663b3103c559e798a89
<span class="o">[</span>…]
</code></pre></div></div>

<h2 id="the-initial-reformatting">The initial reformatting</h2>

<p>All of the above steps should be done in the first PR, so they can easily be code reviewed. In the second PR, we can make the actual formatting changes. Run your <code class="language-plaintext highlighter-rouge">npm run format</code> now, and commit the results.</p>

<p>If your auto-formatting creates a lot of changes and you’ll want to review them manually – you could consider starting from a Prettier configuration that does fewer changes, commit the formatting, and add more changes gradually. This makes it easier to review different formatting changes overall.</p>

<h3 id="manual-issues-to-fix">Manual issues to fix</h3>

<p>If your project uses per-line linting disable comments, make sure the comments still target the correct lines after the reformatting. ESLint has an excellent <code class="language-plaintext highlighter-rouge">--report-unused-disable-directives</code> which helps a lot. Here’s an example where this happened:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">-  // eslint-disable-next-line func-names
</span>  $(
    '#new a.task-type-choice, #new a.choose-different-task-type',
    modal.body,
<span class="gd">-  ).on('click', function () {
</span><span class="gi">+  ).on('click', function onClickNew() {
</span></code></pre></div></div>

<p>There can be other compatibility issues with other static analysis tools, although that’s very rare. For example, I had to disable Prettier for a line where a Stylelint plugin wasn’t producing the expected output anymore – I’d suspect it’s the plugin’s analysis that’s causing the actual issue:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">-  --#{$name}: hsl(
-    #{var(--#{$name}-hue),
-    var(--#{$name}-saturation),
-    var(--#{$name}-lightness)}
-  );
</span><span class="gi">+  // Prettier causes a linting issue when reformatting this.
+  /* prettier-ignore */
+  --#{$name}: hsl(#{ var(--#{$name}-hue), var(--#{$name}-saturation), var(--#{$name}-lightness) });
</span></code></pre></div></div>

<p>I’ve never encountered a case where Prettier changed the semantics of the code at runtime, except perhaps for <a href="https://prettier.io/docs/en/options.html#trailing-commas">trailing commas in function parameters</a>, which should be watched out for on projects that support legacy browsers.</p>

<h2 id="after-the-reformatting">After the reformatting</h2>

<p>Merge it all, making sure CI is linting for Prettier formatting, and passes. Then edit your project’s <code class="language-plaintext highlighter-rouge">.git-blame-ignore-revs</code> with the correct reformatting commit, and that’s it.</p>

<p>For projects with other contributors – make sure to let them know there will be conflicts, and how to resolve them. Here are instructions I made for Wagtail:</p>

<hr />

<h2 id="instructions-to-rebase-in-progress-prs">Instructions to rebase in-progress PRs</h2>

<p>Here are the high-level steps:</p>

<ol>
  <li>Rebase onto the commit before the reformatting (11ccf30f0044a326abef2a5c5568f373ffe46188, or can also be defined as <code class="language-plaintext highlighter-rouge">af942a27e41b47e257b6cd46c01a13cd381fed04^1</code>, note the <code class="language-plaintext highlighter-rouge">^1</code> suffix), with your usual rebasing methodology.</li>
  <li>Rebase onto the reformatting commit (af942a27e41b47e257b6cd46c01a13cd381fed04 / <code class="language-plaintext highlighter-rouge">af942a27e41b47e257b6cd46c01a13cd381fed04</code>), always favouring your branch’s changes, and auto-applying Prettier reformatting.</li>
  <li>Rebase onto <code class="language-plaintext highlighter-rouge">main</code> with your usual rebasing methodology.</li>
</ol>

<p>Here are step-by-step commands, tested on macOS with zsh:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Make a copy of your branch</span>
git branch save/my-existing-branch my-existing-branch
<span class="c"># Make sure you have the latest `main` from Wagtail</span>
git remote add upstream git@github.com:wagtail/wagtail.git
git checkout main
git pull upstream main
<span class="c"># Rebase onto the commit preceding the reformatting to resolve conflicts that would have been present anyway.</span>
git checkout my-existing-branch
git rebase af942a27e41b47e257b6cd46c01a13cd381fed04^1
<span class="c"># Install Prettier and other Wagtail development dependencies</span>
<span class="c"># Make sure you use Node v16 and npm v8</span>
node <span class="nt">--version</span>
npm <span class="nt">--version</span>
npm <span class="nb">install</span>
<span class="c"># Test-run Prettier – this should show formatting errors.</span>
npm run lint:format
<span class="c"># Rebase again, this time with the reformatting as the base,</span>
<span class="c"># always preserving your changes in case of conflicts, and automatically reformatting with Prettier.</span>
git rebase <span class="nt">--strategy-option</span><span class="o">=</span>theirs <span class="nt">--exec</span> <span class="s1">'(npm run format || true) &amp;&amp; git add . &amp;&amp; git commit --amend --no-edit --no-verify'</span> af942a27e41b47e257b6cd46c01a13cd381fed04
<span class="c"># Test-run Prettier – this should show no formatting errors.</span>
npm run lint:format
<span class="c"># Finally rebase onto the latest version from Wagtail main, as per usual.</span>
git rebase main
</code></pre></div></div>

<p>That’s it! There’s a small chance (see below) there may be conflicts with our linters, requiring further manual intervention. Run a final <code class="language-plaintext highlighter-rouge">npm run lint</code> if you want to be sure.</p>

<p>There are a few things worth noting:</p>

<h3 id="its-a-bit-slow">It’s a bit slow</h3>

<p>This will reformat the whole project for every commit to be rebased, so it’s slow for PRs with lots of commits. It’d have been possible for us to only reformat the files changed by a given commit, but I was having trouble doing this in a cross-shell-compatible way.</p>

<h3 id="cases-where-manual-changes-will-be-needed">Cases where manual changes will be needed</h3>

<p>Once this is applied, there is still a risk there’ll be code that clashes with Prettier reformatting, which will need manual intervention. See for example <a href="https://github.com/wagtail/wagtail/commit/37026d521f818bab3724c74df93e9e690e93a9d5">37026d521f818bab3724c74df93e9e690e93a9d5</a>. I would expect this to be rare. As part of our main refactoring, there were two kinds of issues:</p>

<ul>
  <li>1 conflict with Stylelint, where Prettier splitting a long expression into multiple lines changes how the expression is interpreted by our linting.</li>
  <li>8 conflicts with ESLint, where Prettier moved <code class="language-plaintext highlighter-rouge">eslint-disable</code> comments in places where they no longer applied to the correct line.</li>
</ul>

<p>If in doubt, run <code class="language-plaintext highlighter-rouge">npm run lint</code> to check for any issues of this nature.</p>

<h2 id="git-blame">git blame</h2>

<p>For people who use <code class="language-plaintext highlighter-rouge">git blame</code>, we have introduced a <code class="language-plaintext highlighter-rouge">.git-blame-ignore-revs</code> which allows you to ignore the reformatting. See <a href="https://git-scm.com/docs/git-blame#Documentation/git-blame.txt---ignore-revs-fileltfilegt">the official documentation</a> and the file in question for further information.</p>
]]></content>
  </entry>
  
</feed>
